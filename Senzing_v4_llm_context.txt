# sz-sdk-python-grpc examples

## Example TruthSet python

1. [Add TruthSet datasources](../examples/misc/add_truthset_datasources.py)
1. [Add TruthSet data](../examples/misc/add_truthset_data.py)
# sz-sdk-python-grpc errors
# sz-sdk-python-grpc

Placeholder for [GitHub pages].

See [GitHub page].

[GitHub page]: https://garage.senzing.com/sz-sdk-python-grpc
[GitHub pages]: https://pages.github.com/
# sz-sdk-python-core development

The following instructions are useful during development.

**Note:** This has been tested on Linux and Darwin/macOS.
It has not been tested on Windows.

## Prerequisites for development

:thinking: The following tasks need to be complete before proceeding.
These are "one-time tasks" which may already have been completed.

1. The following software programs need to be installed:
   1. [git]
   1. [make]
   1. [docker]
   1. [sphinx]

## Install Senzing C library

Since the Senzing library is a prerequisite, it must be installed first.

1. Verify Senzing C shared objects, configuration, and SDK header files are installed.

   1. `/opt/senzing/er/lib`
   1. `/opt/senzing/er/sdk/c`
   1. `/etc/opt/senzing`

1. If not installed, see [How to Install Senzing for Python Development].

## Install Git repository

1. Identify git repository.

   ```console
   export GIT_ACCOUNT=senzing-garage
   export GIT_REPOSITORY=sz-sdk-python-core
   export GIT_ACCOUNT_DIR=~/${GIT_ACCOUNT}.git
   export GIT_REPOSITORY_DIR="${GIT_ACCOUNT_DIR}/${GIT_REPOSITORY}"

   ```

1. Using the environment variables values just set, follow
   steps in [clone-repository] to install the Git repository.

## Dependencies

1. A one-time command to install dependencies needed for `make` targets.
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make dependencies-for-development

   ```

1. Install dependencies needed for [Python] code.
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make dependencies

   ```

1. Install dependencies needed for documentation.
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make dependencies-for-documentation

   ```

## Lint

1. Run linting.
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make lint

   ```

## Build

Not applicable.

## Run

Not applicable.

## Test

1. Run tests.
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make clean setup test

   ```

## Coverage

Create a code coverage map.

1. Run Go tests.
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make clean setup coverage

   ```

   A web-browser will show the results of the coverage.
   The goal is to have over 80% coverage.

## Documentation

1. View documentation.
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make clean documentation

   ```

1. If a web page doesn't appear, run the following command and paste the results into a web browser's address bar.

   ```console
   echo "file://${GIT_REPOSITORY_DIR}/docs/build/html/index.html"
   ```

## Package

1. Build the `wheel` file for distribution.
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make package

   ```

1. Activate virtual environment.

   ```console
   cd ${GIT_REPOSITORY_DIR}
   source .venv/bin/activate

   ```

1. Verify that `senzing-core` is not installed.
   Example:

   ```console
   python3 -m pip freeze | grep -e senzing_core

   ```

   Nothing is returned.

1. Install directly from `wheel` file.
   Example:

   ```console
   python3 -m pip install ${GIT_REPOSITORY_DIR}/dist/*.whl

   ```

1. Verify that `senzing-core` is installed.
   Example:

   ```console
   python3 -m pip freeze | grep -e senzing-core -e senzing_core

   ```

   Example return:

   > senzing-core @ file:///home/senzing/senzing-garage.git/sz-sdk-python-core/dist/senzing-core-0.0.1-py3-none-any.whl#sha256=2a4e5218d66d5be60ee31bfad5943e6611fc921f28a4326d9594ceceae7e0ac1

1. Uninstall the `senzing-core` python package.
   Example:

   ```console
   python3 -m pip uninstall senzing-core

   ```

1. Deactivate virtual environment.

   ```console
   deactivate

   ```

## Test publish

:warning: This test can only be performed once per versioned release.

1. Test publishing `wheel` file to [Test PyPi].
   Example:

   ```console
   cd ${GIT_REPOSITORY_DIR}
   make publish-test

   ```

1. Visit [Test PyPi] and search for package.

## References

1. [bandit]
1. [black]
1. [coverage]
1. [flake8]
1. [isort]
1. [mypy]
1. [pylint]
1. [pytest]
1. [sphinx]

[bandit]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/bandit.md
[black]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/black.md
[clone-repository]: https://github.com/senzing-garage/knowledge-base/blob/main/HOWTO/clone-repository.md
[coverage]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/coverage.md
[docker]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/docker.md
[flake8]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/flake8.md
[git]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/git.md
[How to Install Senzing for Python Development]: https://github.com/senzing-garage/knowledge-base/blob/main/HOWTO/install-senzing-for-python-development.md
[isort]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/isort.md
[make]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/make.md
[mypy]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/mypy.md
[pylint]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/pylint.md
[pytest]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/pytest.md
[Python]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/python.md
[sphinx]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/sphinx.md
[Test PyPi]: https://github.com/senzing-garage/knowledge-base/blob/main/WHATIS/pypi.md#test-pypi
#! /usr/bin/env python3

from senzing import SzEngineFlags

RESULT = SzEngineFlags.flags_by_name()
print(f"\n{RESULT}\n")
#! /usr/bin/env python3

"""
Simply a header used in development.
"""

print("\n---- misc ------------------------------------------------------------\n")
#! /usr/bin/env python3

from senzing import SzError
from senzing_truthset import TRUTHSET_DATASOURCES

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    sz_configmanager = sz_abstract_factory.create_configmanager()
    sz_diagnostic = sz_abstract_factory.create_diagnostic()
    sz_engine = sz_abstract_factory.create_engine()

    current_default_config_id = sz_configmanager.get_default_config_id()
    OLD_CONFIG_DEFINITION = sz_configmanager.get_config(current_default_config_id)
    config_handle = sz_config.import_config(OLD_CONFIG_DEFINITION)
    for data_source_code in TRUTHSET_DATASOURCES:
        sz_config.add_data_source(config_handle, data_source_code)
    NEW_CONFIG_DEFINITION = sz_config.export_config(config_handle)
    new_default_config_id = sz_configmanager.add_config(NEW_CONFIG_DEFINITION, "Add TruthSet datasources")
    sz_configmanager.replace_default_config_id(current_default_config_id, new_default_config_id)
    sz_abstract_factory.reinitialize(new_default_config_id)
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    1: "SZ_EXPORT_INCLUDE_MULTI_RECORD_ENTITIES",
    2: "SZ_EXPORT_INCLUDE_POSSIBLY_SAME",
    3: "SZ_SEARCH_BY_ATTRIBUTES_MINIMAL_STRONG",
    4: "SZ_EXPORT_INCLUDE_POSSIBLY_RELATED",
    8: "SZ_EXPORT_INCLUDE_NAME_ONLY",
    15: "SZ_SEARCH_INCLUDE_ALL_ENTITIES",
    16: "SZ_EXPORT_INCLUDE_DISCLOSED",
    30: "SZ_EXPORT_INCLUDE_ALL_HAVING_RELATIONSHIPS",
    32: "SZ_EXPORT_INCLUDE_SINGLE_RECORD_ENTITIES",
    33: "SZ_EXPORT_INCLUDE_ALL_ENTITIES",
    64: "SZ_ENTITY_INCLUDE_POSSIBLY_SAME_RELATIONS",
    128: "SZ_ENTITY_INCLUDE_POSSIBLY_RELATED_RELATIONS",
    256: "SZ_ENTITY_INCLUDE_NAME_ONLY_RELATIONS",
    512: "SZ_ENTITY_INCLUDE_DISCLOSED_RELATIONS",
    960: "SZ_ENTITY_INCLUDE_ALL_RELATIONS",
    1024: "SZ_ENTITY_INCLUDE_ALL_FEATURES",
    2048: "SZ_ENTITY_INCLUDE_REPRESENTATIVE_FEATURES",
    4096: "SZ_ENTITY_INCLUDE_ENTITY_NAME",
    8192: "SZ_ENTITY_INCLUDE_RECORD_SUMMARY",
    16384: "SZ_ENTITY_INCLUDE_RECORD_DATA",
    32768: "SZ_ENTITY_INCLUDE_RECORD_MATCHING_INFO",
    63488: "SZ_ENTITY_CORE_FLAGS",
    65536: "SZ_ENTITY_INCLUDE_RECORD_JSON_DATA",
    262144: "SZ_ENTITY_INCLUDE_RECORD_FEATURE_IDS",
    524288: "SZ_ENTITY_INCLUDE_RELATED_ENTITY_NAME",
    1048576: "SZ_ENTITY_INCLUDE_RELATED_MATCHING_INFO",
    1082304: "SZ_ENTITY_BRIEF_DEFAULT_FLAGS",
    2097152: "SZ_ENTITY_INCLUDE_RELATED_RECORD_SUMMARY",
    3734464: "SZ_ENTITY_DEFAULT_FLAGS",
    3734497: "SZ_EXPORT_DEFAULT_FLAGS",
    4194304: "SZ_ENTITY_INCLUDE_RELATED_RECORD_DATA",
    8388608: "SZ_ENTITY_INCLUDE_INTERNAL_FEATURES",
    16777216: "SZ_ENTITY_INCLUDE_FEATURE_STATS",
    33554432: "SZ_FIND_PATH_STRICT_AVOID",
    67108864: "SZ_INCLUDE_FEATURE_SCORES",
    67123203: "SZ_SEARCH_BY_ATTRIBUTES_STRONG",
    67123215: "SZ_SEARCH_BY_ATTRIBUTES_ALL",
    96009152: "SZ_WHY_ENTITIES_DEFAULT_FLAGS",
    134217728: "SZ_SEARCH_INCLUDE_STATS",
    268435456: "SZ_ENTITY_INCLUDE_RECORD_TYPES",
    536870912: "SZ_ENTITY_INCLUDE_RELATED_RECORD_TYPES",
    1073741824: "SZ_FIND_PATH_INCLUDE_MATCHING_INFO",
    1073754112: "SZ_FIND_PATH_DEFAULT_FLAGS",
    2147483648: "SZ_ENTITY_INCLUDE_RECORD_UNMAPPED_DATA",
    8589934592: "SZ_FIND_NETWORK_INCLUDE_MATCHING_INFO",
    8589946880: "SZ_FIND_NETWORK_DEFAULT_FLAGS",
    17179869184: "SZ_INCLUDE_MATCH_KEY_DETAILS",
    34359738368: "SZ_ENTITY_INCLUDE_RECORD_FEATURE_DETAILS",
    68719476736: "SZ_ENTITY_INCLUDE_RECORD_FEATURE_STATS",
    4611686018427387904: "SZ_WITH_INFO"
}// Output has been formatted for easier reading.

{
    "SZ_ENTITY_BRIEF_DEFAULT_FLAGS": 1082304,
    "SZ_ENTITY_CORE_FLAGS": 63488,
    "SZ_ENTITY_DEFAULT_FLAGS": 3734464,
    "SZ_ENTITY_INCLUDE_ALL_FEATURES": 1024,
    "SZ_ENTITY_INCLUDE_ALL_RELATIONS": 960,
    "SZ_ENTITY_INCLUDE_DISCLOSED_RELATIONS": 512,
    "SZ_ENTITY_INCLUDE_ENTITY_NAME": 4096,
    "SZ_ENTITY_INCLUDE_FEATURE_STATS": 16777216,
    "SZ_ENTITY_INCLUDE_INTERNAL_FEATURES": 8388608,
    "SZ_ENTITY_INCLUDE_NAME_ONLY_RELATIONS": 256,
    "SZ_ENTITY_INCLUDE_POSSIBLY_RELATED_RELATIONS": 128,
    "SZ_ENTITY_INCLUDE_POSSIBLY_SAME_RELATIONS": 64,
    "SZ_ENTITY_INCLUDE_RECORD_DATA": 16384,
    "SZ_ENTITY_INCLUDE_RECORD_FEATURE_DETAILS": 34359738368,
    "SZ_ENTITY_INCLUDE_RECORD_FEATURE_IDS": 262144,
    "SZ_ENTITY_INCLUDE_RECORD_FEATURE_STATS": 68719476736,
    "SZ_ENTITY_INCLUDE_RECORD_JSON_DATA": 65536,
    "SZ_ENTITY_INCLUDE_RECORD_MATCHING_INFO": 32768,
    "SZ_ENTITY_INCLUDE_RECORD_SUMMARY": 8192,
    "SZ_ENTITY_INCLUDE_RECORD_TYPES": 268435456,
    "SZ_ENTITY_INCLUDE_RECORD_UNMAPPED_DATA": 2147483648,
    "SZ_ENTITY_INCLUDE_RELATED_ENTITY_NAME": 524288,
    "SZ_ENTITY_INCLUDE_RELATED_MATCHING_INFO": 1048576,
    "SZ_ENTITY_INCLUDE_RELATED_RECORD_DATA": 4194304,
    "SZ_ENTITY_INCLUDE_RELATED_RECORD_SUMMARY": 2097152,
    "SZ_ENTITY_INCLUDE_RELATED_RECORD_TYPES": 536870912,
    "SZ_ENTITY_INCLUDE_REPRESENTATIVE_FEATURES": 2048,
    "SZ_EXPORT_DEFAULT_FLAGS": 3734497,
    "SZ_EXPORT_INCLUDE_ALL_ENTITIES": 33,
    "SZ_EXPORT_INCLUDE_ALL_HAVING_RELATIONSHIPS": 30,
    "SZ_EXPORT_INCLUDE_DISCLOSED": 16,
    "SZ_EXPORT_INCLUDE_MULTI_RECORD_ENTITIES": 1,
    "SZ_EXPORT_INCLUDE_NAME_ONLY": 8,
    "SZ_EXPORT_INCLUDE_POSSIBLY_RELATED": 4,
    "SZ_EXPORT_INCLUDE_POSSIBLY_SAME": 2,
    "SZ_EXPORT_INCLUDE_SINGLE_RECORD_ENTITIES": 32,
    "SZ_FIND_NETWORK_DEFAULT_FLAGS": 8589946880,
    "SZ_FIND_NETWORK_INCLUDE_MATCHING_INFO": 8589934592,
    "SZ_FIND_PATH_DEFAULT_FLAGS": 1073754112,
    "SZ_FIND_PATH_INCLUDE_MATCHING_INFO": 1073741824,
    "SZ_FIND_PATH_STRICT_AVOID": 33554432,
    "SZ_INCLUDE_FEATURE_SCORES": 67108864,
    "SZ_INCLUDE_MATCH_KEY_DETAILS": 17179869184,
    "SZ_SEARCH_BY_ATTRIBUTES_ALL": 67123215,
    "SZ_SEARCH_BY_ATTRIBUTES_MINIMAL_STRONG": 3,
    "SZ_SEARCH_BY_ATTRIBUTES_STRONG": 67123203,
    "SZ_SEARCH_INCLUDE_ALL_ENTITIES": 15,
    "SZ_SEARCH_INCLUDE_STATS": 134217728,
    "SZ_WHY_ENTITIES_DEFAULT_FLAGS": 96009152,
    "SZ_WITH_INFO": 4611686018427387904
}#! /usr/bin/env python3

from senzing import SZ_WITHOUT_INFO, SzError
from senzing_truthset import (
    TRUTHSET_CUSTOMER_RECORDS,
    TRUTHSET_REFERENCE_RECORDS,
    TRUTHSET_WATCHLIST_RECORDS,
)

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    record_sets = [
        TRUTHSET_CUSTOMER_RECORDS,
        TRUTHSET_REFERENCE_RECORDS,
        TRUTHSET_WATCHLIST_RECORDS,
    ]
    for record_set in record_sets:
        for record in record_set.values():
            sz_engine.add_record(
                record.get("DataSource"),
                record.get("Id"),
                record.get("Json"),
                SZ_WITHOUT_INFO,
            )
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags

RESULT = SzEngineFlags.flags_by_value()
print(f"\n{RESULT}\n")
#! /usr/bin/env python3

from senzing import (
    SzAbstractFactory,
    SzConfig,
    SzConfigManager,
    SzDiagnostic,
    SzEngine,
    SzError,
    SzProduct,
)

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}


def try_sz_abstract_factory(sz_abstract_factory_local: SzAbstractFactory) -> None:
    """Just a test of parameter typing."""
    _ = sz_abstract_factory_local


def try_sz_config(sz_config_local: SzConfig) -> None:
    """Just a test of parameter typing."""
    _ = sz_config_local


def try_sz_configmanager(sz_configmanager_local: SzConfigManager) -> None:
    """Just a test of parameter typing."""
    _ = sz_configmanager_local


def try_sz_diagnostic(sz_diagnostic_local: SzDiagnostic) -> None:
    """Just a test of parameter typing."""
    _ = sz_diagnostic_local


def try_sz_engine(sz_engine_local: SzEngine) -> None:
    """Just a test of parameter typing."""
    _ = sz_engine_local


def try_sz_product(sz_product_local: SzProduct) -> None:
    """Just a test of parameter typing."""
    _ = sz_product_local


try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    sz_configmanager = sz_abstract_factory.create_configmanager()
    sz_diagnostic = sz_abstract_factory.create_diagnostic()
    sz_engine = sz_abstract_factory.create_engine()
    sz_product = sz_abstract_factory.create_product()

    try_sz_abstract_factory(sz_abstract_factory)
    try_sz_config(sz_config)
    try_sz_configmanager(sz_configmanager)
    try_sz_diagnostic(sz_diagnostic)
    try_sz_engine(sz_engine)
    try_sz_product(sz_product)

except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    config_handle = sz_config.create_config()
    RESULT = sz_config.get_data_sources(config_handle)
    sz_config.close_config(config_handle)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "DATA_SOURCES": [
        {
            "DSRC_ID": 1,
            "DSRC_CODE": "TEST"
        },
        {
            "DSRC_ID": 2,
            "DSRC_CODE": "SEARCH"
        }
    ]
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    sz_configmanager = sz_abstract_factory.create_configmanager()
    config_id = sz_configmanager.get_default_config_id()
    CONFIG_DEFINITION = sz_configmanager.get_config(config_id)
    config_handle = sz_config.import_config(CONFIG_DEFINITION)
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    config_handle = sz_config.create_config()

    # Do work.

    sz_config.close_config(config_handle)
except SzError as err:
    print(f"\nERROR: {err}\n")
// No output from this example.#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    config_handle = sz_config.create_config()  # Create first in-memory.
    CONFIG_DEFINITION = sz_config.export_config(config_handle)  # Save in-memory to string.
    sz_config.close_config(config_handle)
    print(f"\n{CONFIG_DEFINITION}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE = "NAME_OF_DATASOURCE"
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    config_handle = sz_config.create_config()
    RESULT = sz_config.add_data_source(config_handle, DATA_SOURCE_CODE)
    sz_config.close_config(config_handle)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// No output from this example.#! /usr/bin/env python3

"""
Simply a header used in development.
"""

print("\n---- szconfig --------------------------------------------------------\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE = "TEST"
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    config_handle = sz_config.create_config()
    sz_config.delete_data_source(config_handle, DATA_SOURCE_CODE)
    sz_config.close_config(config_handle)
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted and pruned for easier reading.
// To view a complete configuration, visit /opt/senzing/er/resources/templates/g2config.json

{
    "G2_CONFIG": {
        "CFG_ATTR": [],
        "CFG_CFBOM": [],
        "CFG_CFCALL": [],
        "CFG_CFRTN": [],
        "CFG_CFUNC": [],
        "CFG_DFBOM": [],
        "CFG_DFCALL": [],
        "CFG_DFUNC": [],
        "CFG_DSRC": [],
        "CFG_DSRC_INTEREST": [],
        "CFG_ECLASS": [],
        "CFG_EFBOM": [],
        "CFG_EFCALL": [],
        "CFG_EFUNC": [],
        "CFG_ERFRAG": [],
        "CFG_ERRULE": [],
        "CFG_ETYPE": [],
        "CFG_FBOM": [],
        "CFG_FBOVR": [],
        "CFG_FCLASS": [],
        "CFG_FELEM": [],
        "CFG_FTYPE": [],
        "CFG_GENERIC_THRESHOLD": [],
        "CFG_GPLAN": [],
        "CFG_LENS": [],
        "CFG_LENSRL": [],
        "CFG_RCLASS": [],
        "CFG_RTYPE": [],
        "CFG_SFCALL": [],
        "CFG_SFUNC": [],
        "SYS_OOM": [],
        "CONFIG_BASE_VERSION": {
            "VERSION": "4.0.0",
            "BUILD_VERSION": "4.0.0.00000",
            "BUILD_DATE": "2025-01-01",
            "BUILD_NUMBER": "00000",
            "COMPATIBILITY_VERSION": {
                "CONFIG_VERSION": "11"
            }
        }
    }
}// No output from this example.// Output has been formatted for easier reading.

{
    "DSRC_ID": 1001
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    config_handle_1 = sz_config.create_config()  # Create first in-memory.
    CONFIG_DEFINITION = sz_config.export_config(config_handle_1)  # Save in-memory to string.
    config_handle_2 = sz_config.import_config(CONFIG_DEFINITION)  # Create second in-memory.
    sz_config.close_config(config_handle_1)
    sz_config.close_config(config_handle_2)
except SzError as err:
    print(f"\nERROR: {err}\n")
// No output from this example.#! /usr/bin/env python3

import time

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

CONFIG_COMMENT = "Just an example"
DATA_SOURCE_CODE = f"REPLACE_DEFAULT_CONFIG_ID_{time.time()}"
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    sz_configmanager = sz_abstract_factory.create_configmanager()
    current_default_config_id = sz_configmanager.get_default_config_id()

    # Create a new config.

    CURRENT_CONFIG_DEFINITION = sz_configmanager.get_config(current_default_config_id)
    current_config_handle = sz_config.import_config(CURRENT_CONFIG_DEFINITION)
    sz_config.add_data_source(current_config_handle, DATA_SOURCE_CODE)
    NEW_CONFIG_DEFINITION = sz_config.export_config(current_config_handle)
    new_default_config_id = sz_configmanager.add_config(NEW_CONFIG_DEFINITION, CONFIG_COMMENT)

    # Replace default config id.

    sz_configmanager.replace_default_config_id(current_default_config_id, new_default_config_id)
except SzError as err:
    print(f"\nERROR: {err}\n")
// No output from this example.#! /usr/bin/env python3

import time

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

CONFIG_COMMENT = "Just an example"
DATA_SOURCE_CODE = f"REPLACE_DEFAULT_CONFIG_ID_{time.time()}"
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    sz_configmanager = sz_abstract_factory.create_configmanager()
    old_config_id = sz_configmanager.get_default_config_id()

    # Create a new config.

    OLD_CONFIG_DEFINITION = sz_configmanager.get_config(old_config_id)
    old_config_handle = sz_config.import_config(OLD_CONFIG_DEFINITION)
    sz_config.add_data_source(old_config_handle, DATA_SOURCE_CODE)
    NEW_CONFIG_DEFINITION = sz_config.export_config(old_config_handle)
    config_id = sz_configmanager.add_config(NEW_CONFIG_DEFINITION, CONFIG_COMMENT)

    # Set default config id.

    sz_configmanager.set_default_config_id(config_id)
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

"""
Simply a header used in development.
"""

print("\n---- szconfigmanager -------------------------------------------------\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_configmanager = sz_abstract_factory.create_configmanager()
    CONFIG_LIST = sz_configmanager.get_configs()
    print(f"\n{CONFIG_LIST}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "CONFIGS": [
        {
            "CONFIG_ID": 41320074,
            "CONFIG_COMMENTS": "Default Senzing configuration",
            "SYS_CREATE_DT": "YYYY-MM-DD HH:MM:SS.mmm"
        },
        {
            "CONFIG_ID": 490826130,
            "CONFIG_COMMENTS": "Test",
            "SYS_CREATE_DT": "YYYY-MM-DD HH:MM:SS.mmm"
        }
    ]
}// Output has been formatted and pruned for easier reading.

{
    "G2_CONFIG": {
        "CFG_ATTR": [
            {
                "ATTR_ID": 1001,
                "ATTR_CODE": "DATA_SOURCE",
                "ATTR_CLASS": "OBSERVATION",
                "FTYPE_CODE": null,
                "FELEM_CODE": null,
                "FELEM_REQ": "Yes",
                "DEFAULT_VALUE": null,
                "INTERNAL": "No"
            }
        ],
        "CFG_CFBOM": [
            {
                "CFCALL_ID": 1,
                "FTYPE_ID": 1,
                "FELEM_ID": 2,
                "EXEC_ORDER": 1
            }
        ],
        "CFG_CFCALL": [
            {
                "CFCALL_ID": 1,
                "FTYPE_ID": 1,
                "CFUNC_ID": 2
            }
        ],
        "CFG_CFRTN": [
            {
                "CFRTN_ID": 1,
                "CFUNC_ID": 1,
                "FTYPE_ID": 0,
                "CFUNC_RTNVAL": "FULL_SCORE",
                "EXEC_ORDER": 1,
                "SAME_SCORE": 100,
                "CLOSE_SCORE": 90,
                "LIKELY_SCORE": 80,
                "PLAUSIBLE_SCORE": 70,
                "UN_LIKELY_SCORE": 60
            }
        ],
        "CFG_CFUNC": [
            {
                "CFUNC_ID": 1,
                "CFUNC_CODE": "STR_COMP",
                "CFUNC_DESC": "String comparison",
                "CONNECT_STR": "g2StringComp",
                "ANON_SUPPORT": "Yes",
                "LANGUAGE": null
            }
        ],
        "CFG_DFBOM": [
            {
                "DFCALL_ID": 1,
                "FTYPE_ID": 1,
                "FELEM_ID": 2,
                "EXEC_ORDER": 1
            }
        ],
        "CFG_DFCALL": [
            {
                "DFCALL_ID": 1,
                "FTYPE_ID": 1,
                "DFUNC_ID": 5
            }
        ],
        "CFG_DFUNC": [
            {
                "DFUNC_ID": 1,
                "DFUNC_CODE": "FELEM_STRICT_SUBSET",
                "DFUNC_DESC": "Strict subset of felems",
                "CONNECT_STR": "g2StrictSubsetFelems",
                "ANON_SUPPORT": "Yes",
                "LANGUAGE": null
            }
        ],
        "CFG_DSRC": [
            {
                "DSRC_ID": 1,
                "DSRC_CODE": "TEST",
                "DSRC_DESC": "Test",
                "RETENTION_LEVEL": "Remember"
            }
        ],
        "CFG_DSRC_INTEREST": [],
        "CFG_EFBOM": [
            {
                "EFCALL_ID": 1,
                "FTYPE_ID": 6,
                "FELEM_ID": 60,
                "EXEC_ORDER": 1,
                "FELEM_REQ": "Yes"
            }
        ],
        "CFG_EFCALL": [
            {
                "EFCALL_ID": 1,
                "FTYPE_ID": 6,
                "FELEM_ID": -1,
                "EFUNC_ID": 4,
                "EXEC_ORDER": 1,
                "EFEAT_FTYPE_ID": -1,
                "IS_VIRTUAL": "No"
            }
        ],
        "CFG_EFUNC": [
            {
                "EFUNC_ID": 1,
                "EFUNC_CODE": "EXPRESS_BOM",
                "EFUNC_DESC": "General BOM Hasher",
                "CONNECT_STR": "g2GenericHasher",
                "LANGUAGE": null
            }
        ],
        "CFG_ERFRAG": [
            {
                "ERFRAG_ID": 11,
                "ERFRAG_CODE": "SAME_NAME",
                "ERFRAG_DESC": "SAME_NAME",
                "ERFRAG_SOURCE": "./FRAGMENT[./GNR_SAME_NAME>0]",
                "ERFRAG_DEPENDS": "301"
            }
        ],
        "CFG_ERRULE": [
            {
                "ERRULE_ID": 100,
                "ERRULE_CODE": "SAME_A1",
                "RESOLVE": "Yes",
                "RELATE": "No",
                "RTYPE_ID": 1,
                "QUAL_ERFRAG_CODE": "SAME_A1",
                "DISQ_ERFRAG_CODE": null,
                "ERRULE_TIER": 10
            }
        ],
        "CFG_FBOM": [
            {
                "FTYPE_ID": 1,
                "FELEM_ID": 2,
                "EXEC_ORDER": 1,
                "DISPLAY_LEVEL": 1,
                "DISPLAY_DELIM": null,
                "DERIVED": "No"
            }
        ],
        "CFG_FBOVR": [
            {
                "FTYPE_ID": 5,
                "UTYPE_CODE": "BUSINESS",
                "FTYPE_FREQ": "FF",
                "FTYPE_EXCL": "Yes",
                "FTYPE_STAB": "No"
            }
        ],
        "CFG_FCLASS": [
            {
                "FCLASS_ID": 1,
                "FCLASS_CODE": "NAME"
            }
        ],
        "CFG_FELEM": [
            {
                "FELEM_ID": 2,
                "FELEM_CODE": "FULL_NAME",
                "FELEM_DESC": "Full name",
                "DATA_TYPE": "string"
            }
        ],
        "CFG_FTYPE": [
            {
                "FTYPE_ID": 1,
                "FTYPE_CODE": "NAME",
                "FTYPE_DESC": "Name",
                "FCLASS_ID": 1,
                "FTYPE_FREQ": "NAME",
                "FTYPE_EXCL": "No",
                "FTYPE_STAB": "No",
                "PERSIST_HISTORY": "Yes",
                "USED_FOR_CAND": "No",
                "DERIVED": "No",
                "RTYPE_ID": 0,
                "ANONYMIZE": "No",
                "VERSION": 2,
                "SHOW_IN_MATCH_KEY": "Yes"
            }
        ],
        "CFG_GENERIC_THRESHOLD": [
            {
                "GPLAN_ID": 1,
                "BEHAVIOR": "NAME",
                "FTYPE_ID": 0,
                "CANDIDATE_CAP": 10,
                "SCORING_CAP": -1,
                "SEND_TO_REDO": "Yes"
            }
        ],
        "CFG_GPLAN": [
            {
                "GPLAN_ID": 1,
                "GPLAN_CODE": "INGEST",
                "GPLAN_DESC": "Standard Ingestion"
            }
        ],
        "CFG_RCLASS": [
            {
                "RCLASS_ID": 1,
                "RCLASS_CODE": "DERIVED",
                "RCLASS_DESC": "Derived",
                "IS_DISCLOSED": "No"
            }
        ],
        "CFG_RTYPE": [
            {
                "RTYPE_ID": 1,
                "RTYPE_CODE": "RESOLVED",
                "RTYPE_DESC": "Resolved",
                "RCLASS_ID": 1,
                "BREAK_RES": "No"
            }
        ],
        "CFG_SFCALL": [
            {
                "SFCALL_ID": 1,
                "FTYPE_ID": 1,
                "FELEM_ID": -1,
                "SFUNC_ID": 1,
                "EXEC_ORDER": 1
            }
        ],
        "CFG_SFUNC": [
            {
                "SFUNC_ID": 1,
                "SFUNC_CODE": "PARSE_NAME",
                "SFUNC_DESC": "Parse name",
                "CONNECT_STR": "g2ParseName",
                "LANGUAGE": null
            }
        ],
        "SYS_OOM": [
            {
                "OOM_TYPE": "RF",
                "OOM_LEVEL": "SYSDEFAULT",
                "FTYPE_ID": 0,
                "THRESH1_CNT": 100,
                "THRESH1_OOM": 10,
                "NEXT_THRESH": 1000
            }
        ],
        "SETTINGS": {
            "METAPHONE_VERSION": 3
        },
        "CONFIG_BASE_VERSION": {
            "VERSION": "4.0.0",
            "BUILD_VERSION": "4.0.0.00000",
            "BUILD_DATE": "2025-01-01",
            "BUILD_NUMBER": "00000",
            "COMPATIBILITY_VERSION": {
                "CONFIG_VERSION": "11"
            }
        }
    }
}692503001#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

CONFIG_COMMENT = "Just an empty example"
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
    sz_configmanager = sz_abstract_factory.create_configmanager()
    config_handle = sz_config.create_config()
    CONFIG_DEFINITION = sz_config.export_config(config_handle)
    config_id = sz_configmanager.add_config(CONFIG_DEFINITION, CONFIG_COMMENT)
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_configmanager = sz_abstract_factory.create_configmanager()
    config_id = sz_configmanager.get_default_config_id()
    CONFIG_DEFINITION = sz_configmanager.get_config(config_id)
    print(f"\n{CONFIG_DEFINITION}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_configmanager = sz_abstract_factory.create_configmanager()
    CONFIG_ID = sz_configmanager.get_default_config_id()
    print(f"\n{CONFIG_ID}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// No output from this example.#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}
try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_configmanager = sz_abstract_factory.create_configmanager()
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_product = sz_abstract_factory.create_product()
    RESULT = sz_product.get_license()
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "PRODUCT_NAME": "Senzing API",
    "VERSION": "4.0.0",
    "BUILD_VERSION": "4.0.0.24289",
    "BUILD_DATE": "2024-10-15",
    "BUILD_NUMBER": "2024_10_15__14_21",
    "COMPATIBILITY_VERSION": {
        "CONFIG_VERSION": "11"
    },
    "SCHEMA_VERSION": {
        "ENGINE_SCHEMA_VERSION": "4.0",
        "MINIMUM_REQUIRED_SCHEMA_VERSION": "4.0",
        "MAXIMUM_REQUIRED_SCHEMA_VERSION": "4.99"
    }
}// Output has been formatted for easier reading.

{
    "customer": "Senzing Public Test License",
    "contract": "EVALUATION - support@senzing.com",
    "issueDate": "2024-10-15",
    "licenseType": "EVAL (Solely for non-productive use)",
    "licenseLevel": "STANDARD",
    "billing": "MONTHLY",
    "expireDate": "2025-10-16",
    "recordLimit": 500
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_product = sz_abstract_factory.create_product()
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_product = sz_abstract_factory.create_product()
    RESULT = sz_product.get_version()
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

"""
Simply a header used in development.
"""

print("\n---- szproduct -------------------------------------------------------\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_diagnostic = sz_abstract_factory.create_diagnostic()
    # WARNING
    # WARNING - This will remove all loaded and entity resolved data from the Senzing repository, use with caution!
    # WARNING - Uncomment the purge_repository() call below to complete a purge
    # WARNING

    # sz_diagnostic.purge_repository()
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "dataStores": [
        {
            "id": "CORE",
            "type": "sqlite3",
            "location": "/tmp/sqlite/G2C.db"
        }
    ]
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_diagnostic = sz_abstract_factory.create_diagnostic()
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SECONDS_TO_RUN = 3
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}


try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_diagnostic = sz_abstract_factory.create_diagnostic()
    RESULT = sz_diagnostic.check_datastore_performance(SECONDS_TO_RUN)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_diagnostic = sz_abstract_factory.create_diagnostic()
    RESULT = sz_diagnostic.get_feature(1)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

"""
Simply a header used in development.
"""

print("\n---- szdiagnostic ----------------------------------------------------\n")
{}// No output from this example.// Output has been formatted for easier reading.

{
    "numRecordsInserted": 0,
    "insertTime": 0
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_diagnostic = sz_abstract_factory.create_diagnostic()
    RESULT = sz_diagnostic.get_datastore_info()
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "ENTITY_PATHS": [
        {
            "START_ENTITY_ID": 1,
            "END_ENTITY_ID": 35,
            "ENTITIES": []
        }
    ],
    "ENTITY_PATH_LINKS": [],
    "ENTITIES": [
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 1,
                "ENTITY_NAME": "",
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "TEST",
                        "RECORD_COUNT": 1
                    }
                ]
            }
        },
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 35,
                "ENTITY_NAME": "Robert Smith",
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 3
                    }
                ]
            }
        }
    ]
}#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

FLAGS = SzEngineFlags.SZ_VIRTUAL_ENTITY_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
RECORD_LIST = [
    ("CUSTOMERS", "1001"),
    ("CUSTOMERS", "1002"),
]
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.get_virtual_entity_by_record_id(RECORD_LIST, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
2// Output has been formatted for easier reading.

{
  "DATA_SOURCE": "CUSTOMERS",
  "RECORD_ID": "2207",
  "AFFECTED_ENTITIES": [
    {
      "ENTITY_ID": 305
    }
  ],
  "INTERESTING_ENTITIES": {
    "ENTITIES": []
  }
}
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

ENTITY_ID = 1
FLAGS = SzEngineFlags.SZ_HOW_ENTITY_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.how_entity_by_entity_id(ENTITY_ID, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

ENTITY_ID = 1
FLAGS = SzEngineFlags.SZ_ENTITY_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.get_entity_by_entity_id(ENTITY_ID, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

import json

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

ATTRIBUTES = json.dumps({"NAME_FULL": "BOB SMITH", "EMAIL_ADDRESS": "bsmith@work.com"})
FLAGS = SzEngineFlags.SZ_SEARCH_BY_ATTRIBUTES_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
SEARCH_PROFILE = ""
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.search_by_attributes(ATTRIBUTES, FLAGS, SEARCH_PROFILE)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "HOW_RESULTS": {
        "RESOLUTION_STEPS": [],
        "FINAL_STATE": {
            "NEED_REEVALUATION": 0,
            "VIRTUAL_ENTITIES": [
                {
                    "VIRTUAL_ENTITY_ID": "V1",
                    "MEMBER_RECORDS": [
                        {
                            "INTERNAL_ID": 1,
                            "RECORDS": [
                                {
                                    "DATA_SOURCE": "TEST",
                                    "RECORD_ID": "2"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }
}// Output has been formatted for easier reading.

{
    "workload": {
        "apiVersion": "4.0.0.24289",
        "loadedRecords": 6,
        "addedRecords": 20,
        "bulkAddedRecords": 0,
        "optimizedOut": 3,
        "optimizedOutSkipped": 6,
        "newObsEnt": 18,
        "obsEntHashSame": 4,
        "obsEntHashDiff": 1,
        "partiallyResolved": 0,
        "deletedRecords": 15,
        "changeDeletes": 4,
        "reevaluations": 4,
        "repairedEntities": 6,
        "duration": 96,
        "retries": 0,
        "candidates": 11,
        "actualAmbiguousTest": 0,
        "cachedAmbiguousTest": 0,
        "libFeatCacheHit": 706,
        "libFeatCacheMiss": 589,
        "resFeatStatCacheHit": 6211,
        "resFeatStatCacheMiss": 1052,
        "libFeatInsert": 28,
        "resFeatStatInsert": 28,
        "resFeatStatUpdateAttempt": 522,
        "resFeatStatUpdateFail": 0,
        "unresolveTest": 4,
        "abortedUnresolve": 0,
        "lockWaits": {
            "maxRefreshLocksMS": 0,
            "totalRefreshLocksMS": 0,
            "countRefreshLocks": 0
        },
        "unresolveTriggers": {
            "normalResolve": 0,
            "update": 0,
            "relLink": 0,
            "extensiveResolve": 4,
            "ambiguousNoResolve": 0,
            "ambiguousMultiResolve": 0
        },
        "reresolveTriggers": {
            "abortRetry": 0,
            "unresolveMovement": 0,
            "multipleResolvableCandidates": 0,
            "resolveNewFeatures": 7,
            "newFeatureFTypes": [
                {
                    "ADDRESS": 5
                },
                {
                    "ADDR_KEY": 5
                },
                {
                    "DOB": 5
                },
                {
                    "NAME": 7
                },
                {
                    "NAMEADDR_KEY": 5
                },
                {
                    "NAMEDATE_KEY": 7
                },
                {
                    "NAMEPHONE_KEY": 5
                },
                {
                    "NAMEREGION_KEY": 5
                },
                {
                    "NAME_KEY": 7
                },
                {
                    "PHONE": 5
                }
            ]
        },
        "reresolveSkipped": 1,
        "filteredObsFeat": 0,
        "expressedFeatureCalls": [
            {
                "EFCALL_ID": 1,
                "EFUNC_CODE": "PHONE_HASHER",
                "numCalls": 20
            },
            {
                "EFCALL_ID": 7,
                "EFUNC_CODE": "NAME_HASHER",
                "numCalls": 45
            },
            {
                "EFCALL_ID": 9,
                "EFUNC_CODE": "ADDR_HASHER",
                "numCalls": 21
            },
            {
                "EFCALL_ID": 10,
                "EFUNC_CODE": "EXPRESS_BOM",
                "numCalls": 1
            },
            {
                "EFCALL_ID": 16,
                "EFUNC_CODE": "EXPRESS_ID",
                "numCalls": 1
            },
            {
                "EFCALL_ID": 34,
                "EFUNC_CODE": "FEAT_BUILDER",
                "numCalls": 19
            },
            {
                "EFCALL_ID": 92,
                "EFUNC_CODE": "NAME_HASHER",
                "numCalls": 21
            },
            {
                "EFCALL_ID": 94,
                "EFUNC_CODE": "NAME_HASHER",
                "numCalls": 45
            },
            {
                "EFCALL_ID": 95,
                "EFUNC_CODE": "NAME_HASHER",
                "numCalls": 2
            },
            {
                "EFCALL_ID": 96,
                "EFUNC_CODE": "NAME_HASHER",
                "numCalls": 45
            },
            {
                "EFCALL_ID": 97,
                "EFUNC_CODE": "NAME_HASHER",
                "numCalls": 45
            },
            {
                "EFCALL_ID": 98,
                "EFUNC_CODE": "NAME_HASHER",
                "numCalls": 45
            }
        ],
        "expressedFeaturesCreated": [
            {
                "ADDR_KEY": 42
            },
            {
                "EMAIL_KEY": 19
            },
            {
                "ID_KEY": 1
            },
            {
                "NAMEADDR_KEY": 54
            },
            {
                "NAMEDATE_KEY": 99
            },
            {
                "NAMEID_KEY": 2
            },
            {
                "NAMEPHONE_KEY": 25
            },
            {
                "NAMEREGION_KEY": 54
            },
            {
                "NAME_KEY": 35
            },
            {
                "PHONE_KEY": 20
            },
            {
                "SEARCH_KEY": 1
            }
        ],
        "scoredPairs": [
            {
                "ADDRESS": 8
            },
            {
                "DOB": 18
            },
            {
                "EMAIL": 5
            },
            {
                "NAME": 29
            },
            {
                "PHONE": 9
            },
            {
                "RECORD_TYPE": 10
            }
        ],
        "cacheHit": [
            {
                "DOB": 1
            },
            {
                "NAME": 3
            }
        ],
        "cacheMiss": [
            {
                "ADDRESS": 8
            },
            {
                "DOB": 17
            },
            {
                "EMAIL": 5
            },
            {
                "NAME": 26
            },
            {
                "PHONE": 9
            }
        ],
        "redoTriggers": [
            {
                "DEFERRED_DELETE": 6
            }
        ],
        "latchContention": [],
        "highContentionFeat": [],
        "highContentionResEnt": [],
        "genericDetect": [],
        "candidateBuilders": [
            {
                "ADDR_KEY": 34
            },
            {
                "DOB": 36
            },
            {
                "EMAIL_KEY": 32
            },
            {
                "ID_KEY": 1
            },
            {
                "NAMEADDR_KEY": 34
            },
            {
                "NAMEDATE_KEY": 36
            },
            {
                "NAMEID_KEY": 1
            },
            {
                "NAMEPHONE_KEY": 33
            },
            {
                "NAMEREGION_KEY": 34
            },
            {
                "NAME_KEY": 37
            },
            {
                "PHONE_KEY": 33
            },
            {
                "SEARCH_KEY": 1
            },
            {
                "SSN": 1
            }
        ],
        "suppressedCandidateBuilders": [],
        "suppressedScoredFeatureType": [],
        "suppressedCandidateBuildersForReresolve": [],
        "suppressedScoredFeatureTypeForReresolve": [],
        "suppressedDisclosedRelationshipDomainCount": 0,
        "corruptEntityTestDiagnosis": {
            "corruptionTypes": 0
        },
        "threadState": {
            "active": 0,
            "idle": 8,
            "governorContention": 0,
            "sqlExecuting": 0,
            "loader": 0,
            "resolver": 0,
            "scoring": 0,
            "dataLatchContention": 0,
            "obsEntContention": 0,
            "resEntContention": 0
        },
        "systemResources": {
            "initResources": [
                {
                    "physicalCores": 16
                },
                {
                    "logicalCores": 16
                },
                {
                    "totalMemory": "62.6GB"
                },
                {
                    "availableMemory": "52.7GB"
                }
            ],
            "currResources": [
                {
                    "availableMemory": "48.5GB"
                },
                {
                    "activeThreads": 0
                },
                {
                    "workerThreads": 8
                },
                {
                    "systemLoad": [
                        {
                            "cpuUser": 5.160142
                        },
                        {
                            "cpuSystem": 3.932384
                        },
                        {
                            "cpuIdle": 90.800713
                        },
                        {
                            "cpuWait": 0.071174
                        },
                        {
                            "cpuSoftIrq": 0.035587
                        }
                    ]
                }
            ]
        }
    }
}#! /usr/bin/env python3

"""
Simply a header used in development.
"""

print("\n---- szengine --------------------------------------------------------\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

FLAGS = SzEngineFlags.SZ_WITH_INFO
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    while True:
        redo_record = sz_engine.get_redo_record()
        if not redo_record:
            break
        RESULT = sz_engine.process_redo_record(redo_record, FLAGS)
        print(RESULT)
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

ENTITY_ID = 1
FLAGS = SzEngineFlags.SZ_WITH_INFO
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.reevaluate_entity(ENTITY_ID, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

ENTITY_ID_1 = 1
ENTITY_ID_2 = 4
FLAGS = SzEngineFlags.SZ_WHY_ENTITIES_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.why_entities(
        ENTITY_ID_1,
        ENTITY_ID_2,
        FLAGS,
    )
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE = "TEST"
FLAGS = SzEngineFlags.SZ_WITH_INFO
INSTANCE_NAME = "Example"
RECORD_DEFINITION = (
    "{"
    '"RECORD_TYPE": "PERSON",'
    '"PRIMARY_NAME_LAST": "Smith",'
    '"PRIMARY_NAME_FIRST": "Robert",'
    '"DATE_OF_BIRTH": "12/11/1978",'
    '"ADDR_TYPE": "MAILING",'
    '"ADDR_LINE1": "123 Main Street, Las Vegas NV 89132",'
    '"PHONE_TYPE": "HOME",'
    '"PHONE_NUMBER": "702-919-1300",'
    '"EMAIL_ADDRESS": "bsmith@work.com",'
    '"DATE": "1/2/18",'
    '"STATUS": "Active",'
    '"AMOUNT": "100"'
    "}"
)
RECORD_ID = "1"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.add_record(DATA_SOURCE_CODE, RECORD_ID, RECORD_DEFINITION, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE = "CUSTOMERS"
FLAGS = SzEngineFlags.SZ_RECORD_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
RECORD_ID = "1001"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}


try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.get_record(DATA_SOURCE_CODE, RECORD_ID, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE = "CUSTOMERS"
FLAGS = SzEngineFlags.SZ_WITH_INFO
INSTANCE_NAME = "Example"
RECORD_ID = "1001"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.reevaluate_record(DATA_SOURCE_CODE, RECORD_ID, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "DATA_SOURCE": "TEST",
    "RECORD_ID": "1",
    "AFFECTED_ENTITIES": [
        {
            "ENTITY_ID": 35
        }
    ],
    "INTERESTING_ENTITIES": {
        "ENTITIES": []
    }
}{"RESOLVED_ENTITY":{"ENTITY_ID":1,"ENTITY_NAME":"","FEATURES":{},"RECORD_SUMMARY":[{"DATA_SOURCE":"TEST","RECORD_COUNT":1}],"RECORDS":[{"DATA_SOURCE":"TEST","RECORD_ID":"2","INTERNAL_ID":1,"MATCH_KEY":"","MATCH_LEVEL_CODE":"","ERRULE_CODE":"","FIRST_SEEN_DT":"2024-10-25T17:38:57Z","LAST_SEEN_DT":"2024-10-25T17:38:57Z"}]},"RELATED_ENTITIES":[]}
{"RESOLVED_ENTITY":{"ENTITY_ID":35,"ENTITY_NAME":"Robert Smith","FEATURES":{"ADDRESS":[{"FEAT_DESC":"1515 Adela Lane Las Vegas NV 89111","LIB_FEAT_ID":22,"USAGE_TYPE":"HOME","FEAT_DESC_VALUES":[{"FEAT_DESC":"1515 Adela Lane Las Vegas NV 89111","LIB_FEAT_ID":22}]},{"FEAT_DESC":"123 Main Street, Las Vegas NV 89132","LIB_FEAT_ID":3,"USAGE_TYPE":"MAILING","FEAT_DESC_VALUES":[{"FEAT_DESC":"123 Main Street, Las Vegas NV 89132","LIB_FEAT_ID":3}]}],"DOB":[{"FEAT_DESC":"12/11/1978","LIB_FEAT_ID":2,"FEAT_DESC_VALUES":[{"FEAT_DESC":"12/11/1978","LIB_FEAT_ID":2},{"FEAT_DESC":"11/12/1978","LIB_FEAT_ID":21}]}],"EMAIL":[{"FEAT_DESC":"bsmith@work.com","LIB_FEAT_ID":5,"FEAT_DESC_VALUES":[{"FEAT_DESC":"bsmith@work.com","LIB_FEAT_ID":5}]}],"NAME":[{"FEAT_DESC":"Robert Smith","LIB_FEAT_ID":1,"USAGE_TYPE":"PRIMARY","FEAT_DESC_VALUES":[{"FEAT_DESC":"Robert Smith","LIB_FEAT_ID":1},{"FEAT_DESC":"Bob J Smith","LIB_FEAT_ID":38},{"FEAT_DESC":"Bob Smith","LIB_FEAT_ID":20}]}],"PHONE":[{"FEAT_DESC":"702-919-1300","LIB_FEAT_ID":4,"USAGE_TYPE":"HOME","FEAT_DESC_VALUES":[{"FEAT_DESC":"702-919-1300","LIB_FEAT_ID":4}]},{"FEAT_DESC":"702-919-1300","LIB_FEAT_ID":4,"USAGE_TYPE":"MOBILE","FEAT_DESC_VALUES":[{"FEAT_DESC":"702-919-1300","LIB_FEAT_ID":4}]}],"RECORD_TYPE":[{"FEAT_DESC":"PERSON","LIB_FEAT_ID":10,"FEAT_DESC_VALUES":[{"FEAT_DESC":"PERSON","LIB_FEAT_ID":10}]}]},"RECORD_SUMMARY":[{"DATA_SOURCE":"CUSTOMERS","RECORD_COUNT":3}],"RECORDS":[{"DATA_SOURCE":"CUSTOMERS","RECORD_ID":"1001","INTERNAL_ID":35,"MATCH_KEY":"","MATCH_LEVEL_CODE":"","ERRULE_CODE":"","FIRST_SEEN_DT":"2024-10-25T17:39:00Z","LAST_SEEN_DT":"2024-10-25T17:39:00Z"},{"DATA_SOURCE":"CUSTOMERS","RECORD_ID":"1002","INTERNAL_ID":36,"MATCH_KEY":"+NAME+DOB+PHONE","MATCH_LEVEL_CODE":"RESOLVED","ERRULE_CODE":"CNAME_CFF_CEXCL","FIRST_SEEN_DT":"2024-10-25T17:39:00Z","LAST_SEEN_DT":"2024-10-25T17:39:00Z"},{"DATA_SOURCE":"CUSTOMERS","RECORD_ID":"1003","INTERNAL_ID":37,"MATCH_KEY":"+NAME+DOB+EMAIL","MATCH_LEVEL_CODE":"RESOLVED","ERRULE_CODE":"SF1_PNAME_CSTAB","FIRST_SEEN_DT":"2024-10-25T17:39:00Z","LAST_SEEN_DT":"2024-10-25T17:39:00Z"}]},"RELATED_ENTITIES":[]}
{"RESOLVED_ENTITY":{"ENTITY_ID":38,"ENTITY_NAME":"Edward Kusha","FEATURES":{"ADDRESS":[{"FEAT_DESC":"1304 Poppy Hills Dr Blacklick OH 43004","LIB_FEAT_ID":46,"USAGE_TYPE":"HOME","FEAT_DESC_VALUES":[{"FEAT_DESC":"1304 Poppy Hills Dr Blacklick OH 43004","LIB_FEAT_ID":46}]}],"DOB":[{"FEAT_DESC":"3/1/1970","LIB_FEAT_ID":45,"FEAT_DESC_VALUES":[{"FEAT_DESC":"3/1/1970","LIB_FEAT_ID":45}]}],"EMAIL":[{"FEAT_DESC":"Kusha123@hmail.com","LIB_FEAT_ID":48,"FEAT_DESC_VALUES":[{"FEAT_DESC":"Kusha123@hmail.com","LIB_FEAT_ID":48}]}],"NAME":[{"FEAT_DESC":"Edward Kusha","LIB_FEAT_ID":44,"USAGE_TYPE":"PRIMARY","FEAT_DESC_VALUES":[{"FEAT_DESC":"Edward Kusha","LIB_FEAT_ID":44}]}],"RECORD_TYPE":[{"FEAT_DESC":"PERSON","LIB_FEAT_ID":10,"FEAT_DESC_VALUES":[{"FEAT_DESC":"PERSON","LIB_FEAT_ID":10}]}],"SSN":[{"FEAT_DESC":"294-66-9999","LIB_FEAT_ID":47,"FEAT_DESC_VALUES":[{"FEAT_DESC":"294-66-9999","LIB_FEAT_ID":47}]}]},"RECORD_SUMMARY":[{"DATA_SOURCE":"CUSTOMERS","RECORD_COUNT":1}],"RECORDS":[{"DATA_SOURCE":"CUSTOMERS","RECORD_ID":"1009","INTERNAL_ID":38,"MATCH_KEY":"","MATCH_LEVEL_CODE":"","ERRULE_CODE":"","FIRST_SEEN_DT":"2024-10-25T17:39:00Z","LAST_SEEN_DT":"2024-10-25T17:39:00Z"}]},"RELATED_ENTITIES":[]}
#! /usr/bin/env python3

from typing import List, Tuple

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

AVOID_RECORD_KEYS: List[Tuple[str, str]] = []
END_DATA_SOURCE_CODE = "CUSTOMERS"
END_RECORD_ID = "1009"
FLAGS = SzEngineFlags.SZ_FIND_PATH_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
MAX_DEGREES = 2
REQUIRED_DATA_SOURCES: List[str] = []
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}
START_DATA_SOURCE_CODE = "CUSTOMERS"
START_RECORD_ID = "1001"

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.find_path_by_record_id(
        START_DATA_SOURCE_CODE,
        START_RECORD_ID,
        END_DATA_SOURCE_CODE,
        END_RECORD_ID,
        MAX_DEGREES,
        AVOID_RECORD_KEYS,
        REQUIRED_DATA_SOURCES,
        FLAGS,
    )
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "RESOLVED_ENTITY": {
        "ENTITY_ID": 35,
        "ENTITY_NAME": "Robert Smith",
        "FEATURES": {
            "ADDRESS": [
                {
                    "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                    "LIB_FEAT_ID": 22,
                    "USAGE_TYPE": "HOME",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                            "LIB_FEAT_ID": 22
                        }
                    ]
                },
                {
                    "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                    "LIB_FEAT_ID": 3,
                    "USAGE_TYPE": "MAILING",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                            "LIB_FEAT_ID": 3
                        }
                    ]
                }
            ],
            "DOB": [
                {
                    "FEAT_DESC": "12/11/1978",
                    "LIB_FEAT_ID": 2,
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "12/11/1978",
                            "LIB_FEAT_ID": 2
                        },
                        {
                            "FEAT_DESC": "11/12/1978",
                            "LIB_FEAT_ID": 21
                        }
                    ]
                }
            ],
            "EMAIL": [
                {
                    "FEAT_DESC": "bsmith@work.com",
                    "LIB_FEAT_ID": 5,
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "bsmith@work.com",
                            "LIB_FEAT_ID": 5
                        }
                    ]
                }
            ],
            "NAME": [
                {
                    "FEAT_DESC": "Robert Smith",
                    "LIB_FEAT_ID": 1,
                    "USAGE_TYPE": "PRIMARY",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "Robert Smith",
                            "LIB_FEAT_ID": 1
                        },
                        {
                            "FEAT_DESC": "Bob J Smith",
                            "LIB_FEAT_ID": 38
                        },
                        {
                            "FEAT_DESC": "Bob Smith",
                            "LIB_FEAT_ID": 20
                        }
                    ]
                }
            ],
            "PHONE": [
                {
                    "FEAT_DESC": "702-919-1300",
                    "LIB_FEAT_ID": 4,
                    "USAGE_TYPE": "HOME",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4
                        }
                    ]
                },
                {
                    "FEAT_DESC": "702-919-1300",
                    "LIB_FEAT_ID": 4,
                    "USAGE_TYPE": "MOBILE",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4
                        }
                    ]
                }
            ],
            "RECORD_TYPE": [
                {
                    "FEAT_DESC": "PERSON",
                    "LIB_FEAT_ID": 10,
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "PERSON",
                            "LIB_FEAT_ID": 10
                        }
                    ]
                }
            ]
        },
        "RECORD_SUMMARY": [
            {
                "DATA_SOURCE": "CUSTOMERS",
                "RECORD_COUNT": 3
            }
        ],
        "RECORDS": [
            {
                "DATA_SOURCE": "CUSTOMERS",
                "RECORD_ID": "1001",
                "INTERNAL_ID": 35,
                "MATCH_KEY": "",
                "MATCH_LEVEL_CODE": "",
                "ERRULE_CODE": "",
                "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
            },
            {
                "DATA_SOURCE": "CUSTOMERS",
                "RECORD_ID": "1002",
                "INTERNAL_ID": 36,
                "MATCH_KEY": "+NAME+DOB+PHONE",
                "MATCH_LEVEL_CODE": "RESOLVED",
                "ERRULE_CODE": "CNAME_CFF_CEXCL",
                "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
            },
            {
                "DATA_SOURCE": "CUSTOMERS",
                "RECORD_ID": "1003",
                "INTERNAL_ID": 37,
                "MATCH_KEY": "+NAME+DOB+EMAIL",
                "MATCH_LEVEL_CODE": "RESOLVED",
                "ERRULE_CODE": "SF1_PNAME_CSTAB",
                "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
            }
        ]
    },
    "RELATED_ENTITIES": []
}// Output has been formatted for easier reading.

{
    "DATA_SOURCE": "CUSTOMERS",
    "RECORD_ID": "1001",
    "AFFECTED_ENTITIES": [
        {
            "ENTITY_ID": 35
        }
    ],
    "INTERESTING_ENTITIES": {
        "ENTITIES": []
    }
}// Output has been formatted for easier reading.

{
    "RESOLVED_ENTITY": {
        "ENTITY_ID": 35,
        "ENTITY_NAME": "Robert Smith",
        "FEATURES": {
            "ADDRESS": [
                {
                    "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                    "LIB_FEAT_ID": 22,
                    "USAGE_TYPE": "HOME",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                            "LIB_FEAT_ID": 22
                        }
                    ]
                },
                {
                    "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                    "LIB_FEAT_ID": 3,
                    "USAGE_TYPE": "MAILING",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                            "LIB_FEAT_ID": 3
                        }
                    ]
                }
            ],
            "DOB": [
                {
                    "FEAT_DESC": "12/11/1978",
                    "LIB_FEAT_ID": 2,
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "12/11/1978",
                            "LIB_FEAT_ID": 2
                        },
                        {
                            "FEAT_DESC": "11/12/1978",
                            "LIB_FEAT_ID": 21
                        }
                    ]
                }
            ],
            "EMAIL": [
                {
                    "FEAT_DESC": "bsmith@work.com",
                    "LIB_FEAT_ID": 5,
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "bsmith@work.com",
                            "LIB_FEAT_ID": 5
                        }
                    ]
                }
            ],
            "NAME": [
                {
                    "FEAT_DESC": "Robert Smith",
                    "LIB_FEAT_ID": 1,
                    "USAGE_TYPE": "PRIMARY",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "Robert Smith",
                            "LIB_FEAT_ID": 1
                        },
                        {
                            "FEAT_DESC": "Bob Smith",
                            "LIB_FEAT_ID": 20
                        }
                    ]
                }
            ],
            "PHONE": [
                {
                    "FEAT_DESC": "702-919-1300",
                    "LIB_FEAT_ID": 4,
                    "USAGE_TYPE": "HOME",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4
                        }
                    ]
                },
                {
                    "FEAT_DESC": "702-919-1300",
                    "LIB_FEAT_ID": 4,
                    "USAGE_TYPE": "MOBILE",
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4
                        }
                    ]
                }
            ],
            "RECORD_TYPE": [
                {
                    "FEAT_DESC": "PERSON",
                    "LIB_FEAT_ID": 10,
                    "FEAT_DESC_VALUES": [
                        {
                            "FEAT_DESC": "PERSON",
                            "LIB_FEAT_ID": 10
                        }
                    ]
                }
            ]
        },
        "RECORD_SUMMARY": [
            {
                "DATA_SOURCE": "CUSTOMERS",
                "RECORD_COUNT": 2
            }
        ],
        "RECORDS": [
            {
                "DATA_SOURCE": "CUSTOMERS",
                "RECORD_ID": "1001",
                "INTERNAL_ID": 35,
                "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
            },
            {
                "DATA_SOURCE": "CUSTOMERS",
                "RECORD_ID": "1002",
                "INTERNAL_ID": 36,
                "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
            }
        ]
    }
}#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

BUILD_OUT_DEGREES = 1
FLAGS = SzEngineFlags.SZ_FIND_NETWORK_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
MAX_DEGREES = 2
MAX_ENTITIES = 10
RECORD_LIST = [("CUSTOMERS", "1001"), ("CUSTOMERS", "1009")]
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.find_network_by_record_id(RECORD_LIST, MAX_DEGREES, BUILD_OUT_DEGREES, MAX_ENTITIES, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "WHY_RESULTS": [
        {
            "ENTITY_ID": 1,
            "ENTITY_ID_2": 35,
            "MATCH_INFO": {
                "WHY_KEY": "",
                "WHY_ERRULE_CODE": "",
                "MATCH_LEVEL_CODE": "",
                "CANDIDATE_KEYS": {},
                "DISCLOSED_RELATIONS": {},
                "FEATURE_SCORES": {}
            }
        }
    ],
    "ENTITIES": [
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 1,
                "ENTITY_NAME": "",
                "FEATURES": {},
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "TEST",
                        "RECORD_COUNT": 1
                    }
                ],
                "RECORDS": [
                    {
                        "DATA_SOURCE": "TEST",
                        "RECORD_ID": "2",
                        "INTERNAL_ID": 1,
                        "MATCH_KEY": "",
                        "MATCH_LEVEL_CODE": "",
                        "ERRULE_CODE": "",
                        "FIRST_SEEN_DT": "2024-10-25T17:38:57Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    }
                ]
            },
            "RELATED_ENTITIES": []
        },
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 35,
                "ENTITY_NAME": "Robert Smith",
                "FEATURES": {
                    "ADDRESS": [
                        {
                            "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                            "LIB_FEAT_ID": 22,
                            "USAGE_TYPE": "HOME",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                                    "LIB_FEAT_ID": 22,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                            "LIB_FEAT_ID": 3,
                            "USAGE_TYPE": "MAILING",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                                    "LIB_FEAT_ID": 3,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "ADDR_KEY": [
                        {
                            "FEAT_DESC": "123|MN||89132",
                            "LIB_FEAT_ID": 8,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123|MN||89132",
                                    "LIB_FEAT_ID": 8,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "123|MN||LS FKS",
                            "LIB_FEAT_ID": 7,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123|MN||LS FKS",
                                    "LIB_FEAT_ID": 7,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "1515|ATL||89111",
                            "LIB_FEAT_ID": 24,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515|ATL||89111",
                                    "LIB_FEAT_ID": 24,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 25,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 25,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "DOB": [
                        {
                            "FEAT_DESC": "12/11/1978",
                            "LIB_FEAT_ID": 2,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "12/11/1978",
                                    "LIB_FEAT_ID": 2,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "11/12/1978",
                                    "LIB_FEAT_ID": 21,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "EMAIL": [
                        {
                            "FEAT_DESC": "bsmith@work.com",
                            "LIB_FEAT_ID": 5,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "bsmith@work.com",
                                    "LIB_FEAT_ID": 5,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "EMAIL_KEY": [
                        {
                            "FEAT_DESC": "bsmith@WORK.COM",
                            "LIB_FEAT_ID": 11,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "bsmith@WORK.COM",
                                    "LIB_FEAT_ID": 11,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAME": [
                        {
                            "FEAT_DESC": "Robert Smith",
                            "LIB_FEAT_ID": 1,
                            "USAGE_TYPE": "PRIMARY",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "Robert Smith",
                                    "LIB_FEAT_ID": 1,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "Bob J Smith",
                                    "LIB_FEAT_ID": 38,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "Bob Smith",
                                    "LIB_FEAT_ID": 20,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "Y"
                                }
                            ]
                        }
                    ],
                    "NAMEADDR_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                            "LIB_FEAT_ID": 27,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                                    "LIB_FEAT_ID": 27,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 28,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 28,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||89132",
                            "LIB_FEAT_ID": 12,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||89132",
                                    "LIB_FEAT_ID": 12,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||LS FKS",
                            "LIB_FEAT_ID": 13,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||LS FKS",
                                    "LIB_FEAT_ID": 13,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                            "LIB_FEAT_ID": 29,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                                    "LIB_FEAT_ID": 29,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 26,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 26,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEDATE_KEY": [
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 43,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 43,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 41,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 41,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB=71211",
                            "LIB_FEAT_ID": 40,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 40,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 32,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 32,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1178",
                            "LIB_FEAT_ID": 33,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1178",
                                    "LIB_FEAT_ID": 33,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 42,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 42,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB=71211",
                            "LIB_FEAT_ID": 31,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 31,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 14,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 14,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1178",
                            "LIB_FEAT_ID": 30,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1178",
                                    "LIB_FEAT_ID": 30,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 16,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 16,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB=71211",
                            "LIB_FEAT_ID": 15,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 15,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEPHONE_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|PHONE.PHONE_LAST_5=91300",
                            "LIB_FEAT_ID": 37,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|PHONE.PHONE_LAST_5=91300",
                                    "LIB_FEAT_ID": 37,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|PHONE.PHONE_LAST_5=91300",
                            "LIB_FEAT_ID": 19,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|PHONE.PHONE_LAST_5=91300",
                                    "LIB_FEAT_ID": 19,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEREGION_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|ADDRESS.CITY_STD=LS FKS",
                            "LIB_FEAT_ID": 36,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDRESS.CITY_STD=LS FKS",
                                    "LIB_FEAT_ID": 36,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|POST=89111",
                            "LIB_FEAT_ID": 35,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|POST=89111",
                                    "LIB_FEAT_ID": 35,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDRESS.CITY_STD=LS FKS",
                            "LIB_FEAT_ID": 18,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDRESS.CITY_STD=LS FKS",
                                    "LIB_FEAT_ID": 18,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|POST=89111",
                            "LIB_FEAT_ID": 34,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|POST=89111",
                                    "LIB_FEAT_ID": 34,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|POST=89132",
                            "LIB_FEAT_ID": 17,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|POST=89132",
                                    "LIB_FEAT_ID": 17,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAME_KEY": [
                        {
                            "FEAT_DESC": "J|PP|SM0",
                            "LIB_FEAT_ID": 39,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0",
                                    "LIB_FEAT_ID": 39,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0",
                            "LIB_FEAT_ID": 23,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0",
                                    "LIB_FEAT_ID": 23,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0",
                            "LIB_FEAT_ID": 6,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0",
                                    "LIB_FEAT_ID": 6,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "PHONE": [
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4,
                            "USAGE_TYPE": "HOME",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "702-919-1300",
                                    "LIB_FEAT_ID": 4,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4,
                            "USAGE_TYPE": "MOBILE",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "702-919-1300",
                                    "LIB_FEAT_ID": 4,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "PHONE_KEY": [
                        {
                            "FEAT_DESC": "7029191300",
                            "LIB_FEAT_ID": 9,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "7029191300",
                                    "LIB_FEAT_ID": 9,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "RECORD_TYPE": [
                        {
                            "FEAT_DESC": "PERSON",
                            "LIB_FEAT_ID": 10,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PERSON",
                                    "LIB_FEAT_ID": 10,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 100,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ]
                },
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 3
                    }
                ],
                "RECORDS": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1001",
                        "INTERNAL_ID": 35,
                        "MATCH_KEY": "",
                        "MATCH_LEVEL_CODE": "",
                        "ERRULE_CODE": "",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    },
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1002",
                        "INTERNAL_ID": 36,
                        "MATCH_KEY": "+NAME+DOB+PHONE",
                        "MATCH_LEVEL_CODE": "RESOLVED",
                        "ERRULE_CODE": "CNAME_CFF_CEXCL",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    },
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1003",
                        "INTERNAL_ID": 37,
                        "MATCH_KEY": "+NAME+DOB+EMAIL",
                        "MATCH_LEVEL_CODE": "RESOLVED",
                        "ERRULE_CODE": "SF1_PNAME_CSTAB",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    }
                ]
            },
            "RELATED_ENTITIES": []
        }
    ]
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.get_redo_record()
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "ENTITY_PATHS": [
        {
            "START_ENTITY_ID": 35,
            "END_ENTITY_ID": 38,
            "ENTITIES": []
        }
    ],
    "ENTITY_NETWORK_LINKS": [],
    "ENTITIES": [
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 35,
                "ENTITY_NAME": "Robert Smith",
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 3
                    }
                ]
            }
        },
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 38,
                "ENTITY_NAME": "Edward Kusha",
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 1
                    }
                ]
            }
        }
    ]
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.get_active_config_id()
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
4030462317#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
FLAGS = SzEngineFlags.SZ_RECORD_DEFAULT_FLAGS
RECORD_DEFINITION = (
    "{"
    '"RECORD_TYPE": "PERSON",'
    '"PRIMARY_NAME_LAST": "Smith",'
    '"PRIMARY_NAME_FIRST": "Robert",'
    '"DATE_OF_BIRTH": "12/11/1978",'
    '"ADDR_TYPE": "MAILING",'
    '"ADDR_LINE1": "123 Main Street, Las Vegas NV 89132",'
    '"PHONE_TYPE": "HOME",'
    '"PHONE_NUMBER": "702-919-1300",'
    '"EMAIL_ADDRESS": "bsmith@work.com",'
    '"DATE": "1/2/18",'
    '"STATUS": "Active",'
    '"AMOUNT": "100"'
    "}"
)
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.preprocess_record(RECORD_DEFINITION, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "DATA_SOURCE": "TEST",
    "RECORD_ID": "1",
    "AFFECTED_ENTITIES": [
        {
            "ENTITY_ID": 1
        },
        {
            "ENTITY_ID": 35
        }
    ],
    "INTERESTING_ENTITIES": {
        "ENTITIES": []
    }
}RESOLVED_ENTITY_ID,RESOLVED_ENTITY_NAME,RELATED_ENTITY_ID,MATCH_LEVEL,MATCH_KEY,DATA_SOURCE,RECORD_ID
1,"",0,0,"","TEST","2"
35,"Robert Smith",0,0,"","CUSTOMERS","1001"
35,"Robert Smith",0,1,"+NAME+DOB+PHONE","CUSTOMERS","1002"
35,"Robert Smith",0,1,"+NAME+DOB+EMAIL","CUSTOMERS","1003"
38,"Edward Kusha",0,0,"","CUSTOMERS","1009"
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.get_stats()
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "DATA_SOURCE": "TEST",
    "RECORD_ID": "2",
    "AFFECTED_ENTITIES": [
        {
            "ENTITY_ID": 1
        }
    ],
    "INTERESTING_ENTITIES": {
        "ENTITIES": []
    }
}// Output has been formatted for easier reading.

{
    "REASON": "deferred delete",
    "DATA_SOURCE": "CUSTOMERS",
    "RECORD_ID": "1001",
    "DSRC_ACTION": "X"
}#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

BUILD_OUT_DEGREES = 1
ENTITY_LIST = [1, 4]
FLAGS = SzEngineFlags.SZ_FIND_NETWORK_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
MAX_DEGREES = 2
MAX_ENTITIES = 10
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.find_network_by_entity_id(ENTITY_LIST, MAX_DEGREES, BUILD_OUT_DEGREES, MAX_ENTITIES, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE = "TEST"
FLAGS = SzEngineFlags.SZ_WITH_INFO
INSTANCE_NAME = "Example"
RECORD_ID = "1"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.delete_record(DATA_SOURCE_CODE, RECORD_ID, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from typing import List

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

AVOID_ENTITY_IDS: List[int] = []
END_ENTITY_ID = 4
FLAGS = SzEngineFlags.SZ_FIND_PATH_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
MAX_DEGREES = 2
REQUIRED_DATA_SOURCES: List[str] = []
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}
START_ENTITY_ID = 1

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.find_path_by_entity_id(
        START_ENTITY_ID,
        END_ENTITY_ID,
        MAX_DEGREES,
        AVOID_ENTITY_IDS,
        REQUIRED_DATA_SOURCES,
        FLAGS,
    )
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE = "CUSTOMERS"
FLAGS = SzEngineFlags.SZ_WHY_RECORDS_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
RECORD_ID = "1001"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.why_record_in_entity(
        DATA_SOURCE_CODE,
        RECORD_ID,
        FLAGS,
    )
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

CSV_COLUMN_LIST = (
    "RESOLVED_ENTITY_ID,RELATED_ENTITY_ID,RESOLVED_ENTITY_NAME,MATCH_LEVEL,MATCH_KEY,DATA_SOURCE,RECORD_ID"
)
FLAGS = SzEngineFlags.SZ_EXPORT_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    export_handle = sz_engine.export_csv_entity_report(CSV_COLUMN_LIST, FLAGS)
    while True:
        fragment = sz_engine.fetch_next(export_handle)
        if not fragment:
            break
        print(fragment, end="")
    sz_engine.close_export(export_handle)
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "ENTITY_PATHS": [
        {
            "START_ENTITY_ID": 1,
            "END_ENTITY_ID": 35,
            "ENTITIES": []
        }
    ],
    "ENTITY_NETWORK_LINKS": [],
    "ENTITIES": [
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 1,
                "ENTITY_NAME": "",
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "TEST",
                        "RECORD_COUNT": 1
                    }
                ]
            }
        },
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 35,
                "ENTITY_NAME": "Robert Smith",
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 3
                    }
                ]
            }
        }
    ]
}// Output has been formatted for easier reading.

{
    "RESOLVED_ENTITY": {
        "ENTITY_ID": 1,
        "ENTITY_NAME": "",
        "FEATURES": {},
        "RECORD_SUMMARY": [
            {
                "DATA_SOURCE": "TEST",
                "RECORD_COUNT": 1
            }
        ],
        "RECORDS": [
            {
                "DATA_SOURCE": "TEST",
                "RECORD_ID": "2",
                "INTERNAL_ID": 1,
                "MATCH_KEY": "",
                "MATCH_LEVEL_CODE": "",
                "ERRULE_CODE": "",
                "FIRST_SEEN_DT": "YYYY-MM-DDThh:mm:ssZ",
                "LAST_SEEN_DT": "YYYY-MM-DDThh:mm:ssZ"
            }
        ]
    },
    "RELATED_ENTITIES": []
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    sz_engine.prime_engine()
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.count_redo_records()
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.
{
    "WHY_RESULTS": [
        {
            "INTERNAL_ID": 35,
            "ENTITY_ID": 35,
            "FOCUS_RECORDS": [
                {
                    "DATA_SOURCE": "CUSTOMERS",
                    "RECORD_ID": "1001"
                }
            ],
            "MATCH_INFO": {
                "WHY_KEY": "+NAME+DOB+PHONE+EMAIL",
                "WHY_ERRULE_CODE": "SF1_SNAME_CFF_CSTAB",
                "MATCH_LEVEL_CODE": "RESOLVED",
                "CANDIDATE_KEYS": {
                    "DOB": [
                        {
                            "FEAT_ID": 2,
                            "FEAT_DESC": "12/11/1978"
                        }
                    ],
                    "EMAIL_KEY": [
                        {
                            "FEAT_ID": 11,
                            "FEAT_DESC": "bsmith@WORK.COM"
                        }
                    ],
                    "NAMEDATE_KEY": [
                        {
                            "FEAT_ID": 14,
                            "FEAT_DESC": "RPRT|SM0|DOB.MMDD_HASH=1211"
                        },
                        {
                            "FEAT_ID": 15,
                            "FEAT_DESC": "RPRT|SM0|DOB=71211"
                        },
                        {
                            "FEAT_ID": 16,
                            "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1278"
                        }
                    ],
                    "NAMEPHONE_KEY": [
                        {
                            "FEAT_ID": 19,
                            "FEAT_DESC": "RPRT|SM0|PHONE.PHONE_LAST_5=91300"
                        }
                    ],
                    "NAMEREGION_KEY": [
                        {
                            "FEAT_ID": 18,
                            "FEAT_DESC": "RPRT|SM0|ADDRESS.CITY_STD=LS FKS"
                        }
                    ],
                    "NAME_KEY": [
                        {
                            "FEAT_ID": 6,
                            "FEAT_DESC": "RPRT|SM0"
                        }
                    ],
                    "PHONE_KEY": [
                        {
                            "FEAT_ID": 9,
                            "FEAT_DESC": "7029191300"
                        }
                    ]
                },
                "FEATURE_SCORES": {
                    "ADDRESS": [
                        {
                            "INBOUND_FEAT_ID": 3,
                            "INBOUND_FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                            "INBOUND_FEAT_USAGE_TYPE": "MAILING",
                            "CANDIDATE_FEAT_ID": 22,
                            "CANDIDATE_FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                            "CANDIDATE_FEAT_USAGE_TYPE": "HOME",
                            "SCORE": 42,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 42
                            },
                            "SCORE_BUCKET": "NO_CHANCE",
                            "SCORE_BEHAVIOR": "FF"
                        }
                    ],
                    "DOB": [
                        {
                            "INBOUND_FEAT_ID": 2,
                            "INBOUND_FEAT_DESC": "12/11/1978",
                            "INBOUND_FEAT_USAGE_TYPE": "",
                            "CANDIDATE_FEAT_ID": 2,
                            "CANDIDATE_FEAT_DESC": "12/11/1978",
                            "CANDIDATE_FEAT_USAGE_TYPE": "",
                            "SCORE": 100,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 100
                            },
                            "SCORE_BUCKET": "SAME",
                            "SCORE_BEHAVIOR": "FMES"
                        }
                    ],
                    "EMAIL": [
                        {
                            "INBOUND_FEAT_ID": 5,
                            "INBOUND_FEAT_DESC": "bsmith@work.com",
                            "INBOUND_FEAT_USAGE_TYPE": "",
                            "CANDIDATE_FEAT_ID": 5,
                            "CANDIDATE_FEAT_DESC": "bsmith@work.com",
                            "CANDIDATE_FEAT_USAGE_TYPE": "",
                            "SCORE": 100,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 100
                            },
                            "SCORE_BUCKET": "SAME",
                            "SCORE_BEHAVIOR": "F1"
                        }
                    ],
                    "NAME": [
                        {
                            "INBOUND_FEAT_ID": 1,
                            "INBOUND_FEAT_DESC": "Robert Smith",
                            "INBOUND_FEAT_USAGE_TYPE": "PRIMARY",
                            "CANDIDATE_FEAT_ID": 38,
                            "CANDIDATE_FEAT_DESC": "Bob J Smith",
                            "CANDIDATE_FEAT_USAGE_TYPE": "PRIMARY",
                            "SCORE": 90,
                            "ADDITIONAL_SCORES": {
                                "GENERATION_MATCH": -1,
                                "GNR_FN": 90,
                                "GNR_GN": 88,
                                "GNR_ON": -1,
                                "GNR_SN": 100
                            },
                            "SCORE_BUCKET": "CLOSE",
                            "SCORE_BEHAVIOR": "NAME"
                        },
                        {
                            "INBOUND_FEAT_ID": 1,
                            "INBOUND_FEAT_DESC": "Robert Smith",
                            "INBOUND_FEAT_USAGE_TYPE": "PRIMARY",
                            "CANDIDATE_FEAT_ID": 20,
                            "CANDIDATE_FEAT_DESC": "Bob Smith",
                            "CANDIDATE_FEAT_USAGE_TYPE": "PRIMARY",
                            "SCORE": 97,
                            "ADDITIONAL_SCORES": {
                                "GENERATION_MATCH": -1,
                                "GNR_FN": 97,
                                "GNR_GN": 95,
                                "GNR_ON": -1,
                                "GNR_SN": 100
                            },
                            "SCORE_BUCKET": "CLOSE",
                            "SCORE_BEHAVIOR": "NAME"
                        }
                    ],
                    "PHONE": [
                        {
                            "INBOUND_FEAT_ID": 4,
                            "INBOUND_FEAT_DESC": "702-919-1300",
                            "INBOUND_FEAT_USAGE_TYPE": "HOME",
                            "CANDIDATE_FEAT_ID": 4,
                            "CANDIDATE_FEAT_DESC": "702-919-1300",
                            "CANDIDATE_FEAT_USAGE_TYPE": "MOBILE",
                            "SCORE": 100,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 100
                            },
                            "SCORE_BUCKET": "SAME",
                            "SCORE_BEHAVIOR": "FF"
                        }
                    ],
                    "RECORD_TYPE": [
                        {
                            "INBOUND_FEAT_ID": 10,
                            "INBOUND_FEAT_DESC": "PERSON",
                            "INBOUND_FEAT_USAGE_TYPE": "",
                            "CANDIDATE_FEAT_ID": 10,
                            "CANDIDATE_FEAT_DESC": "PERSON",
                            "CANDIDATE_FEAT_USAGE_TYPE": "",
                            "SCORE": 100,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 100
                            },
                            "SCORE_BUCKET": "SAME",
                            "SCORE_BEHAVIOR": "FVME"
                        }
                    ]
                }
            }
        }
    ],
    "ENTITIES": [
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 35,
                "ENTITY_NAME": "Robert Smith",
                "FEATURES": {
                    "ADDRESS": [
                        {
                            "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                            "LIB_FEAT_ID": 22,
                            "USAGE_TYPE": "HOME",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                                    "LIB_FEAT_ID": 22,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                            "LIB_FEAT_ID": 3,
                            "USAGE_TYPE": "MAILING",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                                    "LIB_FEAT_ID": 3,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "ADDR_KEY": [
                        {
                            "FEAT_DESC": "123|MN||89132",
                            "LIB_FEAT_ID": 8,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123|MN||89132",
                                    "LIB_FEAT_ID": 8,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "123|MN||LS FKS",
                            "LIB_FEAT_ID": 7,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123|MN||LS FKS",
                                    "LIB_FEAT_ID": 7,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "1515|ATL||89111",
                            "LIB_FEAT_ID": 24,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515|ATL||89111",
                                    "LIB_FEAT_ID": 24,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 25,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 25,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "DOB": [
                        {
                            "FEAT_DESC": "12/11/1978",
                            "LIB_FEAT_ID": 2,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "12/11/1978",
                                    "LIB_FEAT_ID": 2,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "11/12/1978",
                                    "LIB_FEAT_ID": 21,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "EMAIL": [
                        {
                            "FEAT_DESC": "bsmith@work.com",
                            "LIB_FEAT_ID": 5,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "bsmith@work.com",
                                    "LIB_FEAT_ID": 5,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "EMAIL_KEY": [
                        {
                            "FEAT_DESC": "bsmith@WORK.COM",
                            "LIB_FEAT_ID": 11,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "bsmith@WORK.COM",
                                    "LIB_FEAT_ID": 11,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAME": [
                        {
                            "FEAT_DESC": "Robert Smith",
                            "LIB_FEAT_ID": 1,
                            "USAGE_TYPE": "PRIMARY",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "Robert Smith",
                                    "LIB_FEAT_ID": 1,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "Bob J Smith",
                                    "LIB_FEAT_ID": 38,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "Bob Smith",
                                    "LIB_FEAT_ID": 20,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "Y"
                                }
                            ]
                        }
                    ],
                    "NAMEADDR_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                            "LIB_FEAT_ID": 27,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                                    "LIB_FEAT_ID": 27,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 28,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 28,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||89132",
                            "LIB_FEAT_ID": 12,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||89132",
                                    "LIB_FEAT_ID": 12,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||LS FKS",
                            "LIB_FEAT_ID": 13,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||LS FKS",
                                    "LIB_FEAT_ID": 13,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                            "LIB_FEAT_ID": 29,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                                    "LIB_FEAT_ID": 29,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 26,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 26,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEDATE_KEY": [
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 43,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 43,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 41,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 41,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB=71211",
                            "LIB_FEAT_ID": 40,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 40,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 32,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 32,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1178",
                            "LIB_FEAT_ID": 33,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1178",
                                    "LIB_FEAT_ID": 33,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 42,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 42,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB=71211",
                            "LIB_FEAT_ID": 31,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 31,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 14,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 14,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1178",
                            "LIB_FEAT_ID": 30,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1178",
                                    "LIB_FEAT_ID": 30,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 16,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 16,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB=71211",
                            "LIB_FEAT_ID": 15,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 15,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEPHONE_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|PHONE.PHONE_LAST_5=91300",
                            "LIB_FEAT_ID": 37,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|PHONE.PHONE_LAST_5=91300",
                                    "LIB_FEAT_ID": 37,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|PHONE.PHONE_LAST_5=91300",
                            "LIB_FEAT_ID": 19,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|PHONE.PHONE_LAST_5=91300",
                                    "LIB_FEAT_ID": 19,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEREGION_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|ADDRESS.CITY_STD=LS FKS",
                            "LIB_FEAT_ID": 36,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDRESS.CITY_STD=LS FKS",
                                    "LIB_FEAT_ID": 36,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|POST=89111",
                            "LIB_FEAT_ID": 35,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|POST=89111",
                                    "LIB_FEAT_ID": 35,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDRESS.CITY_STD=LS FKS",
                            "LIB_FEAT_ID": 18,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDRESS.CITY_STD=LS FKS",
                                    "LIB_FEAT_ID": 18,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|POST=89111",
                            "LIB_FEAT_ID": 34,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|POST=89111",
                                    "LIB_FEAT_ID": 34,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|POST=89132",
                            "LIB_FEAT_ID": 17,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|POST=89132",
                                    "LIB_FEAT_ID": 17,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAME_KEY": [
                        {
                            "FEAT_DESC": "J|PP|SM0",
                            "LIB_FEAT_ID": 39,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0",
                                    "LIB_FEAT_ID": 39,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0",
                            "LIB_FEAT_ID": 23,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0",
                                    "LIB_FEAT_ID": 23,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0",
                            "LIB_FEAT_ID": 6,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0",
                                    "LIB_FEAT_ID": 6,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "PHONE": [
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4,
                            "USAGE_TYPE": "HOME",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "702-919-1300",
                                    "LIB_FEAT_ID": 4,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4,
                            "USAGE_TYPE": "MOBILE",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "702-919-1300",
                                    "LIB_FEAT_ID": 4,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "PHONE_KEY": [
                        {
                            "FEAT_DESC": "7029191300",
                            "LIB_FEAT_ID": 9,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "7029191300",
                                    "LIB_FEAT_ID": 9,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "RECORD_TYPE": [
                        {
                            "FEAT_DESC": "PERSON",
                            "LIB_FEAT_ID": 10,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PERSON",
                                    "LIB_FEAT_ID": 10,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 100,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ]
                },
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 3
                    }
                ],
                "RECORDS": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1001",
                        "INTERNAL_ID": 35,
                        "MATCH_KEY": "",
                        "MATCH_LEVEL_CODE": "",
                        "ERRULE_CODE": "",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    },
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1002",
                        "INTERNAL_ID": 36,
                        "MATCH_KEY": "+NAME+DOB+PHONE",
                        "MATCH_LEVEL_CODE": "RESOLVED",
                        "ERRULE_CODE": "CNAME_CFF_CEXCL",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    },
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1003",
                        "INTERNAL_ID": 37,
                        "MATCH_KEY": "+NAME+DOB+EMAIL",
                        "MATCH_LEVEL_CODE": "RESOLVED",
                        "ERRULE_CODE": "SF1_PNAME_CSTAB",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    }
                ]
            },
            "RELATED_ENTITIES": []
        }
    ]
}// Output has been formatted for easier reading.

{
    "ENTITY_PATHS": [
        {
            "START_ENTITY_ID": 35,
            "END_ENTITY_ID": 38,
            "ENTITIES": []
        }
    ],
    "ENTITY_PATH_LINKS": [],
    "ENTITIES": [
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 35,
                "ENTITY_NAME": "Robert Smith",
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 3
                    }
                ]
            }
        },
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 38,
                "ENTITY_NAME": "Edward Kusha",
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 1
                    }
                ]
            }
        }
    ]
}#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE = "CUSTOMERS"
FLAGS = SzEngineFlags.SZ_ENTITY_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}
RECORD_ID = "1001"

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.get_entity_by_record_id(DATA_SOURCE_CODE, RECORD_ID, FLAGS)
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.

{
    "DATA_SOURCE": "CUSTOMERS",
    "RECORD_ID": "1001",
    "JSON_DATA": {
        "DATA_SOURCE": "CUSTOMERS",
        "RECORD_ID": "1001",
        "RECORD_TYPE": "PERSON",
        "PRIMARY_NAME_LAST": "Smith",
        "PRIMARY_NAME_FIRST": "Robert",
        "DATE_OF_BIRTH": "12/11/1978",
        "ADDR_TYPE": "MAILING",
        "ADDR_LINE1": "123 Main Street, Las Vegas NV 89132",
        "PHONE_TYPE": "HOME",
        "PHONE_NUMBER": "702-919-1300",
        "EMAIL_ADDRESS": "bsmith@work.com",
        "DATE": "1/2/18",
        "STATUS": "Active",
        "AMOUNT": "100"
    }
}// No output from this example.#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}
try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

DATA_SOURCE_CODE_1 = "CUSTOMERS"
DATA_SOURCE_CODE_2 = "CUSTOMERS"
FLAGS = SzEngineFlags.SZ_WHY_ENTITIES_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
RECORD_ID_1 = "1001"
RECORD_ID_2 = "1002"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    RESULT = sz_engine.why_records(
        DATA_SOURCE_CODE_1,
        RECORD_ID_1,
        DATA_SOURCE_CODE_2,
        RECORD_ID_2,
        FLAGS,
    )
    print(f"\n{RESULT}\n")
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted and pruned for easier reading.

{
    "WHY_RESULTS": [
        {
            "INTERNAL_ID": 35,
            "ENTITY_ID": 35,
            "FOCUS_RECORDS": [
                {
                    "DATA_SOURCE": "CUSTOMERS",
                    "RECORD_ID": "1001"
                }
            ],
            "INTERNAL_ID_2": 36,
            "ENTITY_ID_2": 35,
            "FOCUS_RECORDS_2": [
                {
                    "DATA_SOURCE": "CUSTOMERS",
                    "RECORD_ID": "1002"
                }
            ],
            "MATCH_INFO": {
                "WHY_KEY": "+NAME+DOB+PHONE",
                "WHY_ERRULE_CODE": "CNAME_CFF_CEXCL",
                "MATCH_LEVEL_CODE": "RESOLVED",
                "CANDIDATE_KEYS": {
                    "NAMEDATE_KEY": [
                        {
                            "FEAT_ID": 14,
                            "FEAT_DESC": "RPRT|SM0|DOB.MMDD_HASH=1211"
                        },
                        {
                            "FEAT_ID": 15,
                            "FEAT_DESC": "RPRT|SM0|DOB=71211"
                        }
                    ],
                    "NAMEPHONE_KEY": [
                        {
                            "FEAT_ID": 19,
                            "FEAT_DESC": "RPRT|SM0|PHONE.PHONE_LAST_5=91300"
                        }
                    ],
                    "NAMEREGION_KEY": [
                        {
                            "FEAT_ID": 18,
                            "FEAT_DESC": "RPRT|SM0|ADDRESS.CITY_STD=LS FKS"
                        }
                    ],
                    "NAME_KEY": [
                        {
                            "FEAT_ID": 6,
                            "FEAT_DESC": "RPRT|SM0"
                        }
                    ],
                    "PHONE_KEY": [
                        {
                            "FEAT_ID": 9,
                            "FEAT_DESC": "7029191300"
                        }
                    ]
                },
                "DISCLOSED_RELATIONS": {},
                "FEATURE_SCORES": {
                    "ADDRESS": [
                        {
                            "INBOUND_FEAT_ID": 3,
                            "INBOUND_FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                            "INBOUND_FEAT_USAGE_TYPE": "MAILING",
                            "CANDIDATE_FEAT_ID": 22,
                            "CANDIDATE_FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                            "CANDIDATE_FEAT_USAGE_TYPE": "HOME",
                            "SCORE": 42,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 42
                            },
                            "SCORE_BUCKET": "NO_CHANCE",
                            "SCORE_BEHAVIOR": "FF"
                        }
                    ],
                    "DOB": [
                        {
                            "INBOUND_FEAT_ID": 2,
                            "INBOUND_FEAT_DESC": "12/11/1978",
                            "INBOUND_FEAT_USAGE_TYPE": "",
                            "CANDIDATE_FEAT_ID": 21,
                            "CANDIDATE_FEAT_DESC": "11/12/1978",
                            "CANDIDATE_FEAT_USAGE_TYPE": "",
                            "SCORE": 95,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 95
                            },
                            "SCORE_BUCKET": "CLOSE",
                            "SCORE_BEHAVIOR": "FMES"
                        }
                    ],
                    "NAME": [
                        {
                            "INBOUND_FEAT_ID": 1,
                            "INBOUND_FEAT_DESC": "Robert Smith",
                            "INBOUND_FEAT_USAGE_TYPE": "PRIMARY",
                            "CANDIDATE_FEAT_ID": 20,
                            "CANDIDATE_FEAT_DESC": "Bob Smith",
                            "CANDIDATE_FEAT_USAGE_TYPE": "PRIMARY",
                            "SCORE": 97,
                            "ADDITIONAL_SCORES": {
                                "GENERATION_MATCH": -1,
                                "GNR_FN": 97,
                                "GNR_GN": 95,
                                "GNR_ON": -1,
                                "GNR_SN": 100
                            },
                            "SCORE_BUCKET": "CLOSE",
                            "SCORE_BEHAVIOR": "NAME"
                        }
                    ],
                    "PHONE": [
                        {
                            "INBOUND_FEAT_ID": 4,
                            "INBOUND_FEAT_DESC": "702-919-1300",
                            "INBOUND_FEAT_USAGE_TYPE": "HOME",
                            "CANDIDATE_FEAT_ID": 4,
                            "CANDIDATE_FEAT_DESC": "702-919-1300",
                            "CANDIDATE_FEAT_USAGE_TYPE": "MOBILE",
                            "SCORE": 100,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 100
                            },
                            "SCORE_BUCKET": "SAME",
                            "SCORE_BEHAVIOR": "FF"
                        }
                    ],
                    "RECORD_TYPE": [
                        {
                            "INBOUND_FEAT_ID": 10,
                            "INBOUND_FEAT_DESC": "PERSON",
                            "INBOUND_FEAT_USAGE_TYPE": "",
                            "CANDIDATE_FEAT_ID": 10,
                            "CANDIDATE_FEAT_DESC": "PERSON",
                            "CANDIDATE_FEAT_USAGE_TYPE": "",
                            "SCORE": 100,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 100
                            },
                            "SCORE_BUCKET": "SAME",
                            "SCORE_BEHAVIOR": "FVME"
                        }
                    ]
                }
            }
        }
    ],
    "ENTITIES": [
        {
            "RESOLVED_ENTITY": {
                "ENTITY_ID": 35,
                "ENTITY_NAME": "Robert Smith",
                "FEATURES": {
                    "ADDRESS": [
                        {
                            "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                            "LIB_FEAT_ID": 22,
                            "USAGE_TYPE": "HOME",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                                    "LIB_FEAT_ID": 22,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                            "LIB_FEAT_ID": 3,
                            "USAGE_TYPE": "MAILING",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                                    "LIB_FEAT_ID": 3,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "ADDR_KEY": [
                        {
                            "FEAT_DESC": "123|MN||89132",
                            "LIB_FEAT_ID": 8,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123|MN||89132",
                                    "LIB_FEAT_ID": 8,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "123|MN||LS FKS",
                            "LIB_FEAT_ID": 7,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "123|MN||LS FKS",
                                    "LIB_FEAT_ID": 7,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "1515|ATL||89111",
                            "LIB_FEAT_ID": 24,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515|ATL||89111",
                                    "LIB_FEAT_ID": 24,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 25,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 25,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "DOB": [
                        {
                            "FEAT_DESC": "12/11/1978",
                            "LIB_FEAT_ID": 2,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "12/11/1978",
                                    "LIB_FEAT_ID": 2,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "11/12/1978",
                                    "LIB_FEAT_ID": 21,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "EMAIL": [
                        {
                            "FEAT_DESC": "bsmith@work.com",
                            "LIB_FEAT_ID": 5,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "bsmith@work.com",
                                    "LIB_FEAT_ID": 5,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "EMAIL_KEY": [
                        {
                            "FEAT_DESC": "bsmith@WORK.COM",
                            "LIB_FEAT_ID": 11,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "bsmith@WORK.COM",
                                    "LIB_FEAT_ID": 11,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAME": [
                        {
                            "FEAT_DESC": "Robert Smith",
                            "LIB_FEAT_ID": 1,
                            "USAGE_TYPE": "PRIMARY",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "Robert Smith",
                                    "LIB_FEAT_ID": 1,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "Bob J Smith",
                                    "LIB_FEAT_ID": 38,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                },
                                {
                                    "FEAT_DESC": "Bob Smith",
                                    "LIB_FEAT_ID": 20,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "Y"
                                }
                            ]
                        }
                    ],
                    "NAMEADDR_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                            "LIB_FEAT_ID": 27,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                                    "LIB_FEAT_ID": 27,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 28,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 28,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||89132",
                            "LIB_FEAT_ID": 12,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||89132",
                                    "LIB_FEAT_ID": 12,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||LS FKS",
                            "LIB_FEAT_ID": 13,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=123|MN||LS FKS",
                                    "LIB_FEAT_ID": 13,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                            "LIB_FEAT_ID": 29,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||89111",
                                    "LIB_FEAT_ID": 29,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                            "LIB_FEAT_ID": 26,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDR_KEY.EXPRESSION=1515|ATL||LS FKS",
                                    "LIB_FEAT_ID": 26,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEDATE_KEY": [
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 43,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 43,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 41,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 41,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "J|PP|SM0|DOB=71211",
                            "LIB_FEAT_ID": 40,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 40,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 32,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 32,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1178",
                            "LIB_FEAT_ID": 33,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1178",
                                    "LIB_FEAT_ID": 33,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 42,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 42,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|DOB=71211",
                            "LIB_FEAT_ID": 31,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 31,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMDD_HASH=1211",
                            "LIB_FEAT_ID": 14,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMDD_HASH=1211",
                                    "LIB_FEAT_ID": 14,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1178",
                            "LIB_FEAT_ID": 30,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1178",
                                    "LIB_FEAT_ID": 30,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1278",
                            "LIB_FEAT_ID": 16,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB.MMYY_HASH=1278",
                                    "LIB_FEAT_ID": 16,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|DOB=71211",
                            "LIB_FEAT_ID": 15,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|DOB=71211",
                                    "LIB_FEAT_ID": 15,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEPHONE_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|PHONE.PHONE_LAST_5=91300",
                            "LIB_FEAT_ID": 37,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|PHONE.PHONE_LAST_5=91300",
                                    "LIB_FEAT_ID": 37,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|PHONE.PHONE_LAST_5=91300",
                            "LIB_FEAT_ID": 19,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|PHONE.PHONE_LAST_5=91300",
                                    "LIB_FEAT_ID": 19,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAMEREGION_KEY": [
                        {
                            "FEAT_DESC": "PP|SM0|ADDRESS.CITY_STD=LS FKS",
                            "LIB_FEAT_ID": 36,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|ADDRESS.CITY_STD=LS FKS",
                                    "LIB_FEAT_ID": 36,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0|POST=89111",
                            "LIB_FEAT_ID": 35,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0|POST=89111",
                                    "LIB_FEAT_ID": 35,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|ADDRESS.CITY_STD=LS FKS",
                            "LIB_FEAT_ID": 18,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|ADDRESS.CITY_STD=LS FKS",
                                    "LIB_FEAT_ID": 18,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|POST=89111",
                            "LIB_FEAT_ID": 34,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|POST=89111",
                                    "LIB_FEAT_ID": 34,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0|POST=89132",
                            "LIB_FEAT_ID": 17,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0|POST=89132",
                                    "LIB_FEAT_ID": 17,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "NAME_KEY": [
                        {
                            "FEAT_DESC": "J|PP|SM0",
                            "LIB_FEAT_ID": 39,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "J|PP|SM0",
                                    "LIB_FEAT_ID": 39,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "PP|SM0",
                            "LIB_FEAT_ID": 23,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PP|SM0",
                                    "LIB_FEAT_ID": 23,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "RPRT|SM0",
                            "LIB_FEAT_ID": 6,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "RPRT|SM0",
                                    "LIB_FEAT_ID": 6,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "PHONE": [
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4,
                            "USAGE_TYPE": "HOME",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "702-919-1300",
                                    "LIB_FEAT_ID": 4,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        },
                        {
                            "FEAT_DESC": "702-919-1300",
                            "LIB_FEAT_ID": 4,
                            "USAGE_TYPE": "MOBILE",
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "702-919-1300",
                                    "LIB_FEAT_ID": 4,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "PHONE_KEY": [
                        {
                            "FEAT_DESC": "7029191300",
                            "LIB_FEAT_ID": 9,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "7029191300",
                                    "LIB_FEAT_ID": 9,
                                    "USED_FOR_CAND": "Y",
                                    "USED_FOR_SCORING": "N",
                                    "ENTITY_COUNT": 1,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ],
                    "RECORD_TYPE": [
                        {
                            "FEAT_DESC": "PERSON",
                            "LIB_FEAT_ID": 10,
                            "FEAT_DESC_VALUES": [
                                {
                                    "FEAT_DESC": "PERSON",
                                    "LIB_FEAT_ID": 10,
                                    "USED_FOR_CAND": "N",
                                    "USED_FOR_SCORING": "Y",
                                    "ENTITY_COUNT": 100,
                                    "CANDIDATE_CAP_REACHED": "N",
                                    "SCORING_CAP_REACHED": "N",
                                    "SUPPRESSED": "N"
                                }
                            ]
                        }
                    ]
                },
                "RECORD_SUMMARY": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_COUNT": 3
                    }
                ],
                "RECORDS": [
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1001",
                        "INTERNAL_ID": 35,
                        "MATCH_KEY": "",
                        "MATCH_LEVEL_CODE": "",
                        "ERRULE_CODE": "",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    },
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1002",
                        "INTERNAL_ID": 36,
                        "MATCH_KEY": "+NAME+DOB+PHONE",
                        "MATCH_LEVEL_CODE": "RESOLVED",
                        "ERRULE_CODE": "CNAME_CFF_CEXCL",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    },
                    {
                        "DATA_SOURCE": "CUSTOMERS",
                        "RECORD_ID": "1003",
                        "INTERNAL_ID": 37,
                        "MATCH_KEY": "+NAME+DOB+EMAIL",
                        "MATCH_LEVEL_CODE": "RESOLVED",
                        "ERRULE_CODE": "SF1_PNAME_CSTAB",
                        "FIRST_SEEN_DT": "2024-10-25T17:39:00Z",
                        "LAST_SEEN_DT": "2024-10-25T17:39:00Z"
                    }
                ]
            },
            "RELATED_ENTITIES": []
        }
    ]
}// Output has been formatted for easier reading.

{
    "JSON_DATA": {
        "RECORD_TYPE": "PERSON",
        "PRIMARY_NAME_LAST": "Smith",
        "PRIMARY_NAME_FIRST": "Robert",
        "DATE_OF_BIRTH": "12/11/1978",
        "ADDR_TYPE": "MAILING",
        "ADDR_LINE1": "123 Main Street, Las Vegas NV 89132",
        "PHONE_TYPE": "HOME",
        "PHONE_NUMBER": "702-919-1300",
        "EMAIL_ADDRESS": "bsmith@work.com",
        "DATE": "1/2/18",
        "STATUS": "Active",
        "AMOUNT": "100"
    }
}#! /usr/bin/env python3

from senzing import SzEngineFlags, SzError

from senzing_core import SzAbstractFactoryCore

FLAGS = SzEngineFlags.SZ_EXPORT_DEFAULT_FLAGS
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    export_handle = sz_engine.export_json_entity_report(FLAGS)
    while True:
        fragment = sz_engine.fetch_next(export_handle)
        if not fragment:
            break
        print(fragment, end="")
    sz_engine.close_export(export_handle)
except SzError as err:
    print(f"\nERROR: {err}\n")
// Output has been formatted for easier reading.
{
    "RESOLVED_ENTITIES": [
        {
            "MATCH_INFO": {
                "MATCH_LEVEL_CODE": "RESOLVED",
                "MATCH_KEY": "+NAME+EMAIL",
                "ERRULE_CODE": "SF1_CNAME",
                "FEATURE_SCORES": {
                    "EMAIL": [
                        {
                            "INBOUND_FEAT_ID": 5,
                            "INBOUND_FEAT_DESC": "bsmith@work.com",
                            "INBOUND_FEAT_USAGE_TYPE": "",
                            "CANDIDATE_FEAT_ID": 5,
                            "CANDIDATE_FEAT_DESC": "bsmith@work.com",
                            "CANDIDATE_FEAT_USAGE_TYPE": "",
                            "SCORE": 100,
                            "ADDITIONAL_SCORES": {
                                "FULL_SCORE": 100
                            },
                            "SCORE_BUCKET": "SAME",
                            "SCORE_BEHAVIOR": "F1"
                        }
                    ],
                    "NAME": [
                        {
                            "INBOUND_FEAT_ID": -2,
                            "INBOUND_FEAT_DESC": "BOB SMITH",
                            "INBOUND_FEAT_USAGE_TYPE": "",
                            "CANDIDATE_FEAT_ID": 38,
                            "CANDIDATE_FEAT_DESC": "Bob J Smith",
                            "CANDIDATE_FEAT_USAGE_TYPE": "PRIMARY",
                            "SCORE": 93,
                            "ADDITIONAL_SCORES": {
                                "GENERATION_MATCH": -1,
                                "GNR_FN": 93,
                                "GNR_GN": -1,
                                "GNR_ON": -1,
                                "GNR_SN": -1
                            },
                            "SCORE_BUCKET": "CLOSE",
                            "SCORE_BEHAVIOR": "NAME"
                        },
                        {
                            "INBOUND_FEAT_ID": -2,
                            "INBOUND_FEAT_DESC": "BOB SMITH",
                            "INBOUND_FEAT_USAGE_TYPE": "",
                            "CANDIDATE_FEAT_ID": 1,
                            "CANDIDATE_FEAT_DESC": "Robert Smith",
                            "CANDIDATE_FEAT_USAGE_TYPE": "PRIMARY",
                            "SCORE": 97,
                            "ADDITIONAL_SCORES": {
                                "GENERATION_MATCH": -1,
                                "GNR_FN": 97,
                                "GNR_GN": -1,
                                "GNR_ON": -1,
                                "GNR_SN": -1
                            },
                            "SCORE_BUCKET": "CLOSE",
                            "SCORE_BEHAVIOR": "NAME"
                        }
                    ]
                }
            },
            "ENTITY": {
                "RESOLVED_ENTITY": {
                    "ENTITY_ID": 35,
                    "ENTITY_NAME": "Robert Smith",
                    "FEATURES": {
                        "ADDRESS": [
                            {
                                "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                                "LIB_FEAT_ID": 22,
                                "USAGE_TYPE": "HOME",
                                "FEAT_DESC_VALUES": [
                                    {
                                        "FEAT_DESC": "1515 Adela Lane Las Vegas NV 89111",
                                        "LIB_FEAT_ID": 22
                                    }
                                ]
                            },
                            {
                                "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                                "LIB_FEAT_ID": 3,
                                "USAGE_TYPE": "MAILING",
                                "FEAT_DESC_VALUES": [
                                    {
                                        "FEAT_DESC": "123 Main Street, Las Vegas NV 89132",
                                        "LIB_FEAT_ID": 3
                                    }
                                ]
                            }
                        ],
                        "DOB": [
                            {
                                "FEAT_DESC": "12/11/1978",
                                "LIB_FEAT_ID": 2,
                                "FEAT_DESC_VALUES": [
                                    {
                                        "FEAT_DESC": "12/11/1978",
                                        "LIB_FEAT_ID": 2
                                    },
                                    {
                                        "FEAT_DESC": "11/12/1978",
                                        "LIB_FEAT_ID": 21
                                    }
                                ]
                            }
                        ],
                        "EMAIL": [
                            {
                                "FEAT_DESC": "bsmith@work.com",
                                "LIB_FEAT_ID": 5,
                                "FEAT_DESC_VALUES": [
                                    {
                                        "FEAT_DESC": "bsmith@work.com",
                                        "LIB_FEAT_ID": 5
                                    }
                                ]
                            }
                        ],
                        "NAME": [
                            {
                                "FEAT_DESC": "Robert Smith",
                                "LIB_FEAT_ID": 1,
                                "USAGE_TYPE": "PRIMARY",
                                "FEAT_DESC_VALUES": [
                                    {
                                        "FEAT_DESC": "Robert Smith",
                                        "LIB_FEAT_ID": 1
                                    },
                                    {
                                        "FEAT_DESC": "Bob J Smith",
                                        "LIB_FEAT_ID": 38
                                    },
                                    {
                                        "FEAT_DESC": "Bob Smith",
                                        "LIB_FEAT_ID": 20
                                    }
                                ]
                            }
                        ],
                        "PHONE": [
                            {
                                "FEAT_DESC": "702-919-1300",
                                "LIB_FEAT_ID": 4,
                                "USAGE_TYPE": "HOME",
                                "FEAT_DESC_VALUES": [
                                    {
                                        "FEAT_DESC": "702-919-1300",
                                        "LIB_FEAT_ID": 4
                                    }
                                ]
                            },
                            {
                                "FEAT_DESC": "702-919-1300",
                                "LIB_FEAT_ID": 4,
                                "USAGE_TYPE": "MOBILE",
                                "FEAT_DESC_VALUES": [
                                    {
                                        "FEAT_DESC": "702-919-1300",
                                        "LIB_FEAT_ID": 4
                                    }
                                ]
                            }
                        ],
                        "RECORD_TYPE": [
                            {
                                "FEAT_DESC": "PERSON",
                                "LIB_FEAT_ID": 10,
                                "FEAT_DESC_VALUES": [
                                    {
                                        "FEAT_DESC": "PERSON",
                                        "LIB_FEAT_ID": 10
                                    }
                                ]
                            }
                        ]
                    },
                    "RECORD_SUMMARY": [
                        {
                            "DATA_SOURCE": "CUSTOMERS",
                            "RECORD_COUNT": 3
                        }
                    ]
                }
            }
        }
    ]
}#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

# The value of config_id is made up.  Any object created by this AbstractFactory will fail.
CONFIG_ID = 2787481550
INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, CONFIG_ID)
except SzError as err:
    print(f"\nERROR: {err}\n")
// No output from this example.// No output from this example.// No output from this example.#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_diagnostic = sz_abstract_factory.create_diagnostic()
except SzError as err:
    print(f"\nERROR: {err}\n")
// No output from this example.// No output from this example.#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_configmanager = sz_abstract_factory.create_configmanager()
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
except SzError as err:
    print(f"\nERROR: {err}\n")
2025-01-17T22:20:27Z [:281473533707456] INFO: Searching for transliteration rules files in /opt/senzing/data
2025-01-17T22:20:27Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/arabicTransRule.ibm
2025-01-17T22:20:27Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/cyrillicTransRule.ibm
2025-01-17T22:20:27Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/greekTransRule.ibm
2025-01-17T22:20:27Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/hindiTransRule.ibm
2025-01-17T22:20:27Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/japaneseTransRule.ibm
2025-01-17T22:20:27Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/koreanTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/chineseTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/latinTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/cyrillicOnTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/hindiOnTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/japaneseOnTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/koreanOnTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/chineseOnTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/thaiTransRules.sz
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/khmerTransRules.sz
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/burmeseTransRules.sz
2025-01-17T22:20:28Z [:281473533707456] INFO: Loading transliteration rule file: /opt/senzing/data/anyTransRule.ibm
2025-01-17T22:20:28Z [:281473533707456] DBUG: This instance is not expecting anonymized data
2025-01-17T22:20:28Z [:281473533707456] DBUG: Can not hash data
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading Default Token Library [/etc/opt/senzing/cfgVariant.json].
2025-01-17T22:20:28Z [:281473533707456] DBUG: Verifying data store version and config document.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Opening connection to database type sqlite3:
2025-01-17T22:20:28Z [:281473533707456] DBUG: Connected to database.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Shards are not used for the data store.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Opening connection to database type sqlite3:
2025-01-17T22:20:28Z [:281473533707456] DBUG: Connected to database.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Shards are not used for the data store.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Load parameters store...
2025-01-17T22:20:28Z [:281473533707456] DBUG: Populate active store data...
2025-01-17T22:20:28Z [:281473533707456] DBUG: Load containers...
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_FELEM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_FTYPE configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_FCLASS configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_ERFRAG configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_ERRULE configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_CFUNC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_CFCALL configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_CFBOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_DFUNC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_DFCALL configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_DFBOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_CFRTN configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_DSRC_INTEREST configuration.
2025-01-17T22:20:28Z [:281473533707456] WARN: Configuration [CFG_DSRC_INTEREST] returned an empty config
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_RCLASS configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_RTYPE configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_FBOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading SYS_OOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_DSRC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_GPLAN configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_FBOVR configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_EFBOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_EFUNC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_EFCALL configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_SFUNC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_SFCALL configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_GENERIC_THRESHOLD configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Loading CFG_ATTR configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Finalize and verify integrity...
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_FTYPE configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_FBOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_FBOVR configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_GPLAN configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_GENERIC_THRESHOLD configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_ERFRAG configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_ERRULE configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_SFUNC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_SFCALL configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Initializing standardize feature plugins.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_EFUNC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_EFCALL configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Initializing expressed feature plugins.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_EFBOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_CFUNC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_CFRTN configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_CFCALL configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Initializing score feature plugins.
2025-01-17T22:20:28Z [:281473533707456] DBUG: PoBoxExclusive: false
2025-01-17T22:20:28Z [:281473533707456] DBUG: PoBoxExclusiveMode: 10
2025-01-17T22:20:28Z [:281473533707456] DBUG: PoBoxExactNumber: true
2025-01-17T22:20:28Z [:281473533707456] DBUG: ExactLibFeatMatch: false
2025-01-17T22:20:28Z [:281473533707456] DBUG: ContextFreeMatchThreshold: -1
2025-01-17T22:20:28Z [:281473533707456] DBUG: HouseNumberFloor: 80
2025-01-17T22:20:28Z [:281473533707456] DBUG: UnitNumberFloor: 80
2025-01-17T22:20:28Z [:281473533707456] DBUG: ConfusedPenaltyPercent: 5
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_CFBOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_DFUNC configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_DFCALL configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Initializing distinct feature plugins.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_DFBOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying data encryption configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying CFG_DSRC_INTEREST configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying SYS_OOM configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Verifying ScoreCardBuilder configuration.
2025-01-17T22:20:28Z [:281473533707456] DBUG: ...Initializing expressed feature mapping configuration.
2025-01-17T22:20:28Z [:281473533707456] INFO: Specified Configuration Checksum = []
2025-01-17T22:20:28Z [:281473533707456] INFO: This node will perform configuration checks on inbound data.
2025-01-17T22:20:28Z [:281473533707456] INFO: Calculated Configuration Checksum = [w+N3/Y6KVeoUvnrhqAmmI1EzAExM7QMHlw3mJ+u6Nqs=]
2025-01-17T22:20:28Z [:281473533707456] INFO: The specified configuration checksum matches the calculated configuration checksum.
2025-01-17T22:20:28Z [:281473533707456] INFO: This resolver node will perform configuration checks on inbound data.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Closing connection to database:
2025-01-17T22:20:28Z [:281473533707456] DBUG: Disconnected from database.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Closing connection to database:
2025-01-17T22:20:28Z [:281473533707456] DBUG: Disconnected from database.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Data store version and config document verified.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Verifying config integrity.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Opening connection to database type sqlite3:
2025-01-17T22:20:28Z [:281473533707456] DBUG: Connected to database.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Shards are not used for the data store.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Done verifying config integrity.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Closing connection to database:
2025-01-17T22:20:28Z [:281473533707456] DBUG: Disconnected from database.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Creating engine shared database connection.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Opening connection to database type sqlite3:
2025-01-17T22:20:28Z [:281473533707456] DBUG: Connected to database.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Shards are not used for the data store.
2025-01-17T22:20:28Z [:281473533707456] DBUG: Done creating engine shared database connection.
2025-01-17T22:20:28Z [:281473533707456] TRCE: Sz_destroy()
2025-01-17T22:20:28Z [:281473533707456] DBUG: Closing connection to database:
2025-01-17T22:20:28Z [:281473533707456] DBUG: Disconnected from database.
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    # Using get_active_config_id for demonstrations purposes.
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_engine = sz_abstract_factory.create_engine()
    config_id = sz_engine.get_active_config_id()
    sz_abstract_factory.reinitialize(config_id)
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_product = sz_abstract_factory.create_product()
except SzError as err:
    print(f"\nERROR: {err}\n")
// No output from this example.#! /usr/bin/env python3

"""
Simply a header used in development.
"""

print("\n---- szabstractfactory -----------------------------------------------\n")
// No output from this example.#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}
VERBOSE_LOGGING = 1

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=VERBOSE_LOGGING)
    # Create an engine to show debug output
    sz_abstract_factory.create_engine()
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = "Example"
SETTINGS = {
    "PIPELINE": {
        "CONFIGPATH": "/etc/opt/senzing",
        "RESOURCEPATH": "/opt/senzing/er/resources",
        "SUPPORTPATH": "/opt/senzing/data",
    },
    "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS)
    sz_config = sz_abstract_factory.create_config()
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError
from using_abstract_2 import try_using_abstract

from senzing_core import SzAbstractFactoryCore, SzAbstractFactoryParametersCore

FACTORY_PARAMETERS: SzAbstractFactoryParametersCore = {
    "instance_name": "Example",
    "settings": {
        "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/er/resources",
            "SUPPORTPATH": "/opt/senzing/data",
        },
        "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
    },
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(**FACTORY_PARAMETERS)
    try_using_abstract(sz_abstract_factory)
except SzError as err:
    print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzAbstractFactory, SzEngine, SzError

__all__ = ["try_using_abstract"]


def get_stats(sz_engine: SzEngine) -> None:
    """Example of using SzEngine"""
    try:
        stats = sz_engine.get_stats()
        print(f"Stats: {stats}")
    except SzError as err:
        print(f"\nERROR: {err}\n")


def try_using_abstract(sz_abstract_factory: SzAbstractFactory) -> None:
    """Example of using SzAbstractFactoryCore"""
    try:
        sz_product = sz_abstract_factory.create_product()
        version = sz_product.get_version()
        print(f"Version: {version}")
        sz_engine = sz_abstract_factory.create_engine()
        get_stats(sz_engine)
    except SzError as err:
        print(f"\nERROR: {err}\n")
#! /usr/bin/env python3

from senzing import SzError

from senzing_core import SzAbstractFactoryCore, SzAbstractFactoryParametersCore

FACTORY_PARAMETERS: SzAbstractFactoryParametersCore = {
    "instance_name": "Example",
    "settings": {
        "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/er/resources",
            "SUPPORTPATH": "/opt/senzing/data",
        },
        "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
    },
}

try:
    sz_abstract_factory = SzAbstractFactoryCore(**FACTORY_PARAMETERS)
except SzError as err:
    print(f"\nERROR: {err}\n")
# Deleting Data
The deletion snippets outline deleting previously added source records. Deleting source records removes the previously added source record from the system, completes the entity resolution process and persists outcomes in the Senzing repository.

Deleting a record only requires the data source code and record ID for the record to be deleted.

## Snippets
* **DeleteFutures.py**
    * Read and delete source records from a file using multiple threads
* **DeleteLoop.py**
    * Basic read and delete source records from a file
* **DeleteWithInfoFutures.py**
    * Read and delete source records from a file using multiple threads
    * Collect the response from the [with info](../../../README.md#with-info) version of the API and write it to a file

#! /usr/bin/env python3

import os
import sys
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


try:
    sz_factory = SzAbstractFactoryCore("add_records", SETTINGS, verbose_logging=False)
    sz_config = sz_factory.create_config()
    sz_configmanager = sz_factory.create_configmanager()

    config_id = sz_configmanager.get_default_config_id()
    config_definition = sz_configmanager.get_config(config_id)
    config_handle = sz_config.import_config(config_definition)

    for data_source in ("CUSTOMERS", "REFERENCE", "WATCHLIST"):
        response = sz_config.add_data_source(config_handle, data_source)

    config_definition = sz_config.export_config(config_handle)
    config_id = sz_configmanager.add_config(config_definition, INSTANCE_NAME)
    sz_configmanager.set_default_config_id(config_id)

    response2 = sz_config.get_data_sources(config_handle)
    sz_config.close_config(config_handle)
    print(response2)
except SzError as err:
    print(f"{err.__class__.__name__} - {err}", file=sys.stderr)
#! /usr/bin/env python3

import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")
INSTANCE_NAME = Path(__file__).stem

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_product = sz_factory.create_product()
    print(sz_product.get_license())
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
# Deleting Data

The information snippets outline the retrieval of different informational aspects of a Senzing instance or engine.

## Snippets

- **check_datastore_performance.py**
  - Run an insert test against the Senzing repository to gauge performance
- **get_datastore_info.py**
  - Return basic information about the Senzing repository(s)
- **get_license.py**
  - Return the currently in use license details
- **get_stats.py**
  - Return statistical information from the Senzing engine during entity resolution processing
- **get_version.py**
  - Return the current Senzing product version details
#! /usr/bin/env python3

import concurrent.futures
import itertools
import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")
INPUT_FILE = Path("../../resources/data/load-500.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def add_record(engine, record_to_add):
    record_dict = json.loads(record_to_add)
    data_source = record_dict.get("DATA_SOURCE", "")
    record_id = record_dict.get("RECORD_ID", "")
    engine.add_record(data_source, record_id, record_to_add)


def engine_stats(engine):
    try:
        print(f"\n{engine.get_stats()}\n")
    except SzRetryableError as err:
        mock_logger("WARN", err)
    except SzError as err:
        mock_logger("CRITICAL", err)
        raise err


def futures_add(engine, input_file):
    success_recs = 0
    error_recs = 0

    with open(input_file, "r", encoding="utf-8") as file:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = {
                executor.submit(add_record, engine, record): record
                for record in itertools.islice(file, executor._max_workers)
            }

            while futures:
                done, _ = concurrent.futures.wait(futures, return_when=concurrent.futures.FIRST_COMPLETED)
                for f in done:
                    try:
                        f.result()
                    except (SzBadInputError, json.JSONDecodeError) as err:
                        mock_logger("ERROR", err, futures[f])
                        error_recs += 1
                    except SzRetryableError as err:
                        mock_logger("WARN", err, futures[f])
                        error_recs += 1
                    except (SzUnrecoverableError, SzError) as err:
                        mock_logger("CRITICAL", err, futures[f])
                        raise err
                    else:
                        record = file.readline()
                        if record:
                            futures[executor.submit(add_record, engine, record)] = record

                        success_recs += 1
                        if success_recs % 100 == 0:
                            print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)

                        if success_recs % 200 == 0:
                            engine_stats(engine)
                    finally:
                        del futures[f]

            print(f"\nSuccessfully loaded {success_recs:,} records, with" f" {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    futures_add(sz_engine, INPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")
INSTANCE_NAME = Path(__file__).stem

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_product = sz_factory.create_product()
    print(sz_product.get_version())
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3

import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")
INSTANCE_NAME = Path(__file__).stem
SECONDS_TO_RUN = 3

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_diagnostic = sz_factory.create_diagnostic()
    print(sz_diagnostic.check_datastore_performance(SECONDS_TO_RUN))
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3

import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")
INSTANCE_NAME = Path(__file__).stem

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_diagnostic = sz_factory.create_diagnostic()
    print(sz_diagnostic.get_datastore_info())
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3

import concurrent.futures
import json
import os
import sys
from multiprocessing import Process, Queue
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INPUT_FILE = Path("../../resources/data/load-500.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def add_record(engine, record_to_add):
    record_dict = json.loads(record_to_add)
    data_source = record_dict.get("DATA_SOURCE", "")
    record_id = record_dict.get("RECORD_ID", "")
    engine.add_record(data_source, record_id, record_to_add)


def producer(input_file, queue):
    with open(input_file, "r", encoding="utf-8") as file:
        for record in file:
            queue.put(record, block=True)


def consumer(engine, queue):
    success_recs = 0
    error_recs = 0

    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {executor.submit(add_record, engine, queue.get()): _ for _ in range(executor._max_workers)}

        while futures:
            done, _ = concurrent.futures.wait(futures, return_when=concurrent.futures.FIRST_COMPLETED)
            for f in done:
                try:
                    f.result()
                except (SzBadInputError, json.JSONDecodeError) as err:
                    mock_logger("ERROR", err, futures[f])
                    error_recs += 1
                except SzRetryableError as err:
                    mock_logger("WARN", err, futures[f])
                    error_recs += 1
                except (SzUnrecoverableError, SzError) as err:
                    mock_logger("CRITICAL", err, futures[f])
                    raise err
                else:
                    if not queue.empty():
                        record = queue.get()
                        futures[executor.submit(add_record, engine, record)] = record

                    success_recs += 1
                    if success_recs % 100 == 0:
                        print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)
                finally:
                    del futures[f]

        print(f"\nSuccessfully loaded {success_recs:,} records, with {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()

    input_queue = Queue(maxsize=200)  # type: ignore
    producer_proc = Process(target=producer, args=(INPUT_FILE, input_queue))
    producer_proc.start()
    consumer_proc = Process(target=consumer, args=(sz_engine, input_queue))
    consumer_proc.start()
    producer_proc.join()
    consumer_proc.join()

except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INPUT_FILE = Path("../../resources/data/load-500.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def add_records_from_file(engine, input_file):
    success_recs = 0
    error_recs = 0

    with open(input_file, "r", encoding="utf-8") as file:
        for record_to_add in file:
            try:
                record_dict = json.loads(record_to_add)
                data_source = record_dict.get("DATA_SOURCE", "")
                record_id = record_dict.get("RECORD_ID", "")
                engine.add_record(data_source, record_id, record_to_add)
            except (SzBadInputError, json.JSONDecodeError) as err:
                mock_logger("ERROR", err, record_to_add)
                error_recs += 1
            except SzRetryableError as err:
                mock_logger("WARN", err, record_to_add)
                error_recs += 1
            except (SzUnrecoverableError, SzError) as err:
                mock_logger("CRITICAL", err, record_to_add)
                raise err
            else:
                success_recs += 1

            if success_recs % 100 == 0:
                print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)

    print(f"\nSuccessfully loaded {success_recs:,} records, with {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    add_records_from_file(sz_engine, INPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
# Loading Data

The loading snippets outline adding new source records. Adding source records ingests [mapped](https://senzing.zendesk.com/hc/en-us/articles/231925448-Generic-Entity-Specification-JSON-CSV-Mapping) JSON data, completes the entity resolution process and persists outcomes in the Senzing repository. Adding a source record with the same data source code and record ID as an existing record will replace it.

## Snippets

- **add_futures.py**
  - Read and load source records from a file using multiple threads
- **add_queue.py**
  - Read and load source records using a queue
- **add_records_loop.py**
  - Basic read and add source records from a file
- **add_records.py**
  - Basic iteration over a few records, adding each one
- **add_truthset_loop.py**
  - Read and load from multiple source files, adding a sample truth set
- **add_with_info_futures.py**
  - Read and load source records from a file using multiple threads
  - Collect the response using the [SZ_WITH_INFO flag](../../README.md#with-info) on the `add_record()` method and write it to a file
#! /usr/bin/env python3

import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INPUT_FILES = [
    Path("../../resources/data/truthset/customers.jsonl").resolve(),
    Path("../../resources/data/truthset/reference.jsonl").resolve(),
    Path("../../resources/data/truthset/watchlist.jsonl").resolve(),
]
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def add_records_from_file(engine, input_file):
    success_recs = 0
    error_recs = 0

    with open(input_file, "r", encoding="utf-8") as file:
        print(f"\nAdding records from {input_file}")

        for record_to_add in file:
            try:
                record_dict = json.loads(record_to_add)
                data_source = record_dict.get("DATA_SOURCE", "")
                record_id = record_dict.get("RECORD_ID", "")
                engine.add_record(data_source, record_id, record_to_add)
            except (SzBadInputError, json.JSONDecodeError) as err:
                mock_logger("ERROR", err, record_to_add)
                error_recs += 1
            except SzRetryableError as err:
                mock_logger("WARN", err, record_to_add)
                error_recs += 1
            except (SzUnrecoverableError, SzError) as err:
                mock_logger("CRITICAL", err, record_to_add)
                raise err
            else:
                success_recs += 1

            if success_recs % 100 == 0:
                print(f"Processed {success_recs:,} adds, with {error_recs:,} errors")

    print(f"\nSuccessfully loaded {success_recs:,} records, with {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    for load_file in INPUT_FILES:
        add_records_from_file(sz_engine, load_file)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import json
import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
RECORDS = [
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "1001",
        "RECORD_TYPE": "PERSON",
        "PRIMARY_NAME_LAST": "Smith",
        "PRIMARY_NAME_FIRST": "Robert",
        "DATE_OF_BIRTH": "12/11/1978",
        "ADDR_TYPE": "MAILING",
        "ADDR_FULL": "123 Main Street, Las Vegas NV 89132",
        "PHONE_TYPE": "HOME",
        "PHONE_NUMBER": "702-919-1300",
        "EMAIL_ADDRESS": "bsmith@work.com",
    },
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "1002",
        "RECORD_TYPE": "PERSON",
        "PRIMARY_NAME_LAST": "Smith II",
        "PRIMARY_NAME_FIRST": "Bob",
        "DATE_OF_BIRTH": "11/12/1978",
        "ADDR_TYPE": "HOME",
        "ADDR_LINE1": "1515 Adela Lane",
        "ADDR_CITY": "Las Vegas",
        "ADDR_STATE": "NV",
        "ADDR_POSTAL_CODE": "89111",
        "PHONE_TYPE": "MOBILE",
        "PHONE_NUMBER": "702-919-1300",
    },
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "1003",
        "RECORD_TYPE": "PERSON",
        "PRIMARY_NAME_LAST": "Smith",
        "PRIMARY_NAME_FIRST": "Bob",
        "PRIMARY_NAME_MIDDLE": "J",
        "DATE_OF_BIRTH": "12/11/1978",
        "EMAIL_ADDRESS": "bsmith@work.com",
    },
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "1004",
        "RECORD_TYPE": "PERSON",
        "PRIMARY_NAME_LAST": "Smith",
        "PRIMARY_NAME_FIRST": "B",
        "ADDR_TYPE": "HOME",
        "ADDR_LINE1": "1515 Adela Ln",
        "ADDR_CITY": "Las Vegas",
        "ADDR_STATE": "NV",
        "ADDR_POSTAL_CODE": "89132",
        "EMAIL_ADDRESS": "bsmith@work.com",
    },
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "1005",
        "RECORD_TYPE": "PERSON",
        "PRIMARY_NAME_LAST": "Smith",
        "PRIMARY_NAME_FIRST": "Rob",
        "PRIMARY_NAME_MIDDLE": "E",
        "DRIVERS_LICENSE_NUMBER": "112233",
        "DRIVERS_LICENSE_STATE": "NV",
        "ADDR_TYPE": "MAILING",
        "ADDR_LINE1": "123 E Main St",
        "ADDR_CITY": "Henderson",
        "ADDR_STATE": "NV",
        "ADDR_POSTAL_CODE": "89132",
    },
]
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()

    for record in RECORDS:
        data_source = record["DATA_SOURCE"]
        record_id = record["RECORD_ID"]
        sz_engine.add_record(data_source, record_id, json.dumps(record))
        print(f"Record {record_id} added", flush=True)
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3

import concurrent.futures
import itertools
import json
import os
import sys
from pathlib import Path

from senzing import (
    SzBadInputError,
    SzEngineFlags,
    SzError,
    SzRetryableError,
    SzUnrecoverableError,
)
from senzing_core import SzAbstractFactoryCore

INPUT_FILE = Path("../../resources/data/load-500-with-errors.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem
OUTPUT_FILE = Path("../../resources/output/add_file_with_info.jsonl").resolve()
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def add_record(engine, record_to_add):
    record_dict = json.loads(record_to_add)
    data_source = record_dict.get("DATA_SOURCE", "")
    record_id = record_dict.get("RECORD_ID", "")
    return engine.add_record(data_source, record_id, record_to_add, flags=SzEngineFlags.SZ_WITH_INFO)


def engine_stats(engine):
    try:
        print(f"\n{engine.get_stats()}\n")
    except SzRetryableError as err:
        mock_logger("WARN", err)
    except SzError as err:
        mock_logger("CRITICAL", err)
        raise err


def futures_add(engine, input_file, output_file):
    success_recs = 0
    error_recs = 0

    with open(output_file, "w", encoding="utf-8") as out_file:
        with open(input_file, "r", encoding="utf-8") as in_file:
            with concurrent.futures.ThreadPoolExecutor() as executor:
                futures = {
                    executor.submit(add_record, engine, record): record
                    for record in itertools.islice(in_file, executor._max_workers)
                }

                while futures:
                    done, _ = concurrent.futures.wait(futures, return_when=concurrent.futures.FIRST_COMPLETED)
                    for f in done:
                        try:
                            result = f.result()
                        except (SzBadInputError, json.JSONDecodeError) as err:
                            mock_logger("ERROR", err, futures[f])
                            error_recs += 1
                        except SzRetryableError as err:
                            mock_logger("WARN", err, futures[f])
                            error_recs += 1
                        except (SzUnrecoverableError, SzError) as err:
                            mock_logger("CRITICAL", err, futures[f])
                            raise err
                        else:
                            record = in_file.readline()
                            if record:
                                futures[executor.submit(add_record, engine, record)] = record

                            out_file.write(f"{result}\n")

                            success_recs += 1
                            if success_recs % 100 == 0:
                                print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)

                            if success_recs % 200 == 0:
                                engine_stats(engine)
                        finally:
                            del futures[f]

                print(f"\nSuccessfully loaded {success_recs:,} records, with" f" {error_recs:,} errors")
                print(f"\nWith info responses written to {output_file}")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    futures_add(sz_engine, INPUT_FILE, OUTPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import concurrent.futures
import itertools
import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INPUT_FILE = Path("../../resources/data/load-500.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def add_record(engine, record_to_add):
    record_dict = json.loads(record_to_add)
    data_source = record_dict.get("DATA_SOURCE", "")
    record_id = record_dict.get("RECORD_ID", "")
    engine.add_record(data_source, record_id, record_to_add)


def futures_add(engine, input_file):
    success_recs = 0
    error_recs = 0

    with open(input_file, "r", encoding="utf-8") as file:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = {
                executor.submit(add_record, engine, record): record
                for record in itertools.islice(file, executor._max_workers)
            }

            while futures:
                done, _ = concurrent.futures.wait(futures, return_when=concurrent.futures.FIRST_COMPLETED)
                for f in done:
                    try:
                        f.result()
                    except (SzBadInputError, json.JSONDecodeError) as err:
                        mock_logger("ERROR", err, futures[f])
                        error_recs += 1
                    except SzRetryableError as err:
                        mock_logger("WARN", err, futures[f])
                        error_recs += 1
                    except (SzUnrecoverableError, SzError) as err:
                        mock_logger("CRITICAL", err, futures[f])
                        raise err
                    else:
                        record = file.readline()
                        if record:
                            futures[executor.submit(add_record, engine, record)] = record

                        success_recs += 1
                        if success_recs % 100 == 0:
                            print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)
                    finally:
                        del futures[f]

            print(f"\nSuccessfully loaded {success_recs:,} records, with" f" {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    futures_add(sz_engine, INPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import concurrent.futures
import os
import sys
import time
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def get_redo_record(engine):
    try:
        return engine.get_redo_record()
    except SzError as err:
        mock_logger("CRITICAL", err)
        raise err


def prime_redo_records(engine, quantity):
    redo_records = []
    for _ in range(quantity):
        redo_record = get_redo_record(engine)
        if redo_record:
            redo_records.append(redo_record)
    return redo_records


def process_redo_record(engine, redo_record):
    engine.process_redo_record(redo_record)


def redo_count(engine):
    try:
        return engine.count_redo_records()
    except SzRetryableError as err:
        mock_logger("WARN", err)
    except SzError as err:
        mock_logger("CRITICAL", err)
        raise err


def redo_pause(success):
    print("No redo records to process, pausing for 30 seconds. Total processed:" f" {success:,} (CTRL-C to exit)...")
    time.sleep(30)


def futures_redo(engine):
    success_recs = 0
    error_recs = 0
    redo_paused = False

    with concurrent.futures.ThreadPoolExecutor() as executor:
        while 1:
            futures = {
                executor.submit(process_redo_record, engine, record): record
                for record in prime_redo_records(engine, executor._max_workers)
            }
            if not futures:
                redo_pause(success_recs)
            else:
                break

        while 1:
            done, _ = concurrent.futures.wait(futures, return_when=concurrent.futures.FIRST_COMPLETED)
            for f in done:
                try:
                    _ = f.result()
                except SzBadInputError as err:
                    mock_logger("ERROR", err, futures[f])
                    error_recs += 1
                except SzRetryableError as err:
                    mock_logger("WARN", err, futures[f])
                    error_recs += 1
                except (SzUnrecoverableError, SzError) as err:
                    mock_logger("CRITICAL", err, futures[f])
                    raise err
                else:
                    record = get_redo_record(engine)
                    if record:
                        futures[executor.submit(process_redo_record, engine, record)] = record
                    else:
                        redo_paused = True

                    success_recs += 1
                    if success_recs % 100 == 0:
                        print(f"Processed {success_recs:,} redo records, with" f" {error_recs:,} errors")
                finally:
                    del futures[f]

            if redo_paused:
                while not redo_count(engine):
                    redo_pause(success_recs)
                redo_paused = False
                while len(futures) < executor._max_workers:
                    record = get_redo_record(engine)
                    if record:
                        futures[executor.submit(process_redo_record, engine, record)] = record


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    futures_redo(sz_engine)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import os
import sys
import time
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def process_redo(engine):
    success_recs = 0
    error_recs = 0

    while 1:
        try:
            response = engine.get_redo_record()

            if not response:
                print(
                    "No redo records to process, pausing for 30 seconds. Total"
                    f" processed {success_recs:,} . (CTRL-C to exit)..."
                )
                time.sleep(30)
                continue

            engine.process_redo_record(response)

            success_recs += 1
            if success_recs % 100 == 0:
                print(f"Processed {success_recs:,} redo records, with" f" {error_recs:,} errors")
        except SzBadInputError as err:
            mock_logger("ERROR", err)
            error_recs += 1
        except SzRetryableError as err:
            mock_logger("WARN", err)
            error_recs += 1
        except (SzUnrecoverableError, SzError) as err:
            mock_logger("CRITICAL", err)
            raise err


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    process_redo(sz_engine)
except SzError as err:
    mock_logger("CRITICAL", err)
# Redo Records

The redo snippets outline processing redo records. During normal processing of loading, deleting and replacing data the Senzing engine may determine additional work needs to be completed for an entity. There are times the Senzing engine will decide to defer this additional work. Examples of why this may happen include:

- Records loaded in parallel are clustering around the same entities causing contention
- Automatic corrections
- Cleansing decisions made on attributes determined to no longer be useful for entity resolution

When an entity requires additional work a record is automatically created in the system indicating this requirement. These records are called redo records. Redo records need to be periodically or continuously checked for and processed. Periodically is suitable after manipulating smaller portions of data, for example, at the end of a batch load of data. In contrast, a continuous process checking for and processing redo records is suitable in a streaming system that is constantly manipulating data. In general, it is recommended to have a continuous redo process checking for any redo records to process and processing them.

## Snippets

- **add_with_redo.py**
  - Read and load source records from a file and then process any redo records
- **redo_continuous_futures.py**
  - Continuously monitor for redo records to process using multiple threads
- **redo_continuous.py**
  - Basic example of continuously monitoring for redo records to process
- **redo_with_info_continuous.py**
  - Continuously monitor for redo records to process
  - Collect the response using the [SZ_WITH_INFO flag](../../README.md#with-info) on the `process_redo_record()` method and write it to a file
#! /usr/bin/env python3

import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INPUT_FILES = [
    Path("../../resources/data/truthset/customers.jsonl").resolve(),
    Path("../../resources/data/truthset/reference.jsonl").resolve(),
    Path("../../resources/data/truthset/watchlist.jsonl").resolve(),
]
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def add_records_from_file(engine, input_file):
    success_recs = 0
    error_recs = 0

    with open(input_file, "r", encoding="utf-8") as file:

        for record_to_add in file:
            try:
                record_dict = json.loads(record_to_add)
                data_source = record_dict.get("DATA_SOURCE", None)
                record_id = record_dict.get("RECORD_ID", None)
                engine.add_record(data_source, record_id, record_to_add)
            except (SzBadInputError, json.JSONDecodeError) as err:
                mock_logger("ERROR", err, record_to_add)
                error_recs += 1
            except SzRetryableError as err:
                mock_logger("WARN", err, record_to_add)
                error_recs += 1
            except (SzUnrecoverableError, SzError) as err:
                mock_logger("CRITICAL", err, record_to_add)
                raise err
            else:
                success_recs += 1

            if success_recs % 100 == 0:
                print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)

    print(f"\nSuccessfully added {success_recs:,} records, with {error_recs:,} errors")


def process_redo(engine):
    success_recs = 0
    error_recs = 0

    print("\nStarting to process redo records...")

    while 1:
        try:
            response = engine.get_redo_record()
            if not response:
                break
            engine.process_redo_record(response)

            success_recs += 1
            if success_recs % 1 == 0:
                print(f"Processed {success_recs:,} redo records, with" f" {error_recs:,} errors")
        except SzBadInputError as err:
            mock_logger("ERROR", err)
            error_recs += 1
        except SzRetryableError as err:
            mock_logger("WARN", err)
            error_recs += 1
        except (SzUnrecoverableError, SzError) as err:
            mock_logger("CRITICAL", err)
            raise err

    print(f"\nSuccessfully processed {success_recs:,} redo records, with" f" {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    for load_file in INPUT_FILES:
        add_records_from_file(sz_engine, load_file)
    redo_count = sz_engine.count_redo_records()

    if redo_count:
        process_redo(sz_engine)
    else:
        print("\nNo redo records to process")
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import os
import signal
import sys
import time
from pathlib import Path

from senzing import (
    SzBadInputError,
    SzEngineFlags,
    SzError,
    SzRetryableError,
    SzUnrecoverableError,
)
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
OUTPUT_FILE = Path("../../resources/output/redo_with_info_continuous.jsonl").resolve()
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def signal_handler(signum, frame):
    print(f"\nWith info responses written to {OUTPUT_FILE}")
    sys.exit()


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def redo_pause(success):
    print("No redo records to process, pausing for 30 seconds. Total processed:" f" {success:,} (CTRL-C to exit)...")
    time.sleep(30)


def process_redo(engine, output_file):
    success_recs = 0
    error_recs = 0

    with open(output_file, "w", encoding="utf-8") as out_file:
        try:
            while 1:
                redo_record = engine.get_redo_record()

                if not redo_record:
                    redo_pause(success_recs)
                    continue

                response = engine.process_redo_record(redo_record, flags=SzEngineFlags.SZ_WITH_INFO)
                success_recs += 1
                out_file.write(f"{response}\n")

                if success_recs % 100 == 0:
                    print(f"Processed {success_recs:,} redo records, with" f" {error_recs:,} errors")
        except SzBadInputError as err:
            mock_logger("ERROR", err, redo_record)
            error_recs += 1
        except SzRetryableError as err:
            mock_logger("WARN", err, redo_record)
            error_recs += 1
        except (SzUnrecoverableError, SzError) as err:
            mock_logger("CRITICAL", err, redo_record)
            raise err


signal.signal(signal.SIGINT, signal_handler)

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    process_redo(sz_engine, OUTPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
# Searching for Entities

The search snippets outline searching for entities in the system. Searching for entities uses the same mapped JSON data [specification](https://senzing.zendesk.com/hc/en-us/articles/231925448-Generic-Entity-Specification-JSON-CSV-Mapping) as SDK methods such as `add_record()` to format the search request.

There are [considerations](https://senzing.zendesk.com/hc/en-us/articles/360007880814-Guidelines-for-Successful-Entity-Searching) to be aware of when searching.

## Snippets

- **search_futures.py**
  - Read and search for records from a file using multiple threads
  - To see results first load records with [add_futures.py](../loading/add_futures.py)
- **search_records.py**
  - Basic iteration over a few records, searching for each one
  - To see results first load records with [add_truthset_loop.py](../loading/add_truthset_loop.py)
#! /usr/bin/env python3

import concurrent.futures
import itertools
import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INPUT_FILE = Path("../../resources/data/search-50.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def search_record(engine, record_to_search):
    return engine.search_by_attributes(record_to_search)


def futures_search(engine, input_file):
    success_recs = 0
    error_recs = 0

    with open(input_file, "r", encoding="utf-8") as in_file:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = {
                executor.submit(search_record, engine, record): record
                for record in itertools.islice(in_file, executor._max_workers)
            }

            while futures:
                done, _ = concurrent.futures.wait(futures, return_when=concurrent.futures.FIRST_COMPLETED)
                for f in done:
                    try:
                        result = f.result()
                    except (SzBadInputError, json.JSONDecodeError) as err:
                        mock_logger("ERROR", err, futures[f])
                        error_recs += 1
                    except SzRetryableError as err:
                        mock_logger("WARN", err, futures[f])
                        error_recs += 1
                    except (SzUnrecoverableError, SzError) as err:
                        mock_logger("CRITICAL", err, futures[f])
                        raise err
                    else:
                        record = in_file.readline()
                        if record:
                            futures[executor.submit(search_record, engine, record)] = record

                        success_recs += 1
                        if success_recs % 100 == 0:
                            print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)

                        print(f"\n------ Searched: {futures[f]}", flush=True)
                        print(f"\n{result}", flush=True)
                    finally:
                        del futures[f]

            print(f"\nSuccessfully searched {success_recs:,} records, with" f" {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    futures_search(sz_engine, INPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")

search_records = [
    {
        "NAME_FULL": "Susan Moony",
        "DATE_OF_BIRTH": "15/6/1998",
        "SSN_NUMBER": "521212123",
    },
    {
        "NAME_FIRST": "Robert",
        "NAME_LAST": "Smith",
        "ADDR_FULL": "123 Main Street Las Vegas NV 89132",
    },
    {
        "NAME_FIRST": "Makio",
        "NAME_LAST": "Yamanaka",
        "ADDR_FULL": "787 Rotary Drive Rotorville FL 78720",
    },
]


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def searcher(engine):
    for search_record in search_records:
        try:
            record_str = json.dumps(search_record)
            response = engine.search_by_attributes(record_str)
        except (SzBadInputError, json.JSONDecodeError) as err:
            mock_logger("ERROR", err, record_str)
        except SzRetryableError as err:
            mock_logger("WARN", err, record_str)
        except (SzUnrecoverableError, SzError) as err:
            mock_logger("CRITICAL", err, record_str)
            raise err

        print(f"\n------ Searched: {record_str}", flush=True)
        print(f"\n{response}", flush=True)


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    searcher(sz_engine)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import os
import sys
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
PURGE_MSG = """
**************************************** WARNING ****************************************

This example will purge all currently loaded data from the Senzing datastore!
Before proceeding, all instances of Senzing (custom code, tools, etc.) must be shut down.

*****************************************************************************************

Are you sure you want to continue and purge the Senzing datastore? Type YESPURGESENZING to purge: """
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


if input(PURGE_MSG) != "YESPURGESENZING":
    sys.exit()

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_diagnostic = sz_factory.create_diagnostic()
    sz_diagnostic.purge_repository()
    print("\nSenzing datastore purged")
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3

import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

# The value of config_id is made up, this example will fail if you run it
CONFIG_ID = 2787481550
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, CONFIG_ID)
    sz_abstract_factory.create_engine()
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3

import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_config = sz_factory.create_config()
    sz_configmgr = sz_factory.create_configmanager()
    sz_diagnostic = sz_factory.create_diagnostic()
    sz_engine = sz_factory.create_engine()
    sz_product = sz_factory.create_product()
    # Do work...
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3

import configparser
from pathlib import Path

INI_FILE = Path("../../resources/g2module/G2Module.ini").resolve()
settings = {}

cfgp = configparser.ConfigParser()
cfgp.optionxform = str  # type: ignore
cfgp.read(INI_FILE)

for section in cfgp.sections():
    settings[section] = dict(cfgp.items(section))

print(settings)
# Initialization

## Snippets

- **abstract_factory_parameters.py**
  - Used to create a dictionary that can be unpacked when creating an SzAbstractFactoryCore, also useful for type annotations
- **engine_priming.py**
  - Priming the Senzing engine before use loads resource intensive assets upfront. Without priming the first SDK call to the engine will appear slower than usual as it causes these assets to be loaded
- **factory_and_engines.py**
  - Basic example of how to create an abstract Senzing factory and each of the available engines
- **g2_module_ini_to_json.py**
  - The snippets herein utilize the `SENZING_ENGINE_CONFIGURATION_JSON` environment variable for Senzing abstract factory creation
  - If you are familiar with working with a Senzing project you may be aware the same configuration data is held in the G2Module.ini file
  - Example to convert G2Module.ini to a JSON string for use with `SENZING_ENGINE_CONFIGURATION_JSON`
- **purge_repository.py**
  - **WARNING** This script will remove all data from a Senzing repository, use with caution! **WARNING**
  - It will prompt first, still use with caution!
#! /usr/bin/env python3

import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    print("Priming Senzing engine...")
    sz_engine.prime_engine()
    # Do work...
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3

import os
from pathlib import Path

from senzing import SzError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")
VERBOSE_LOGGING = 1

try:
    sz_abstract_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=VERBOSE_LOGGING)
    # Create an engine to show debug output
    sz_abstract_factory.create_engine()
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
#! /usr/bin/env python3


from senzing import SzError
from senzing_core import SzAbstractFactoryCore, SzAbstractFactoryParametersCore

FACTORY_PARAMETERS: SzAbstractFactoryParametersCore = {
    "instance_name": "abstract_factory_parameters",
    "settings": {
        "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/er/resources",
            "SUPPORTPATH": "/opt/senzing/data",
        },
        "SQL": {"CONNECTION": "sqlite3://na:na@/tmp/sqlite/G2C.db"},
    },
    "verbose_logging": 0,
}

try:
    sz_factory = SzAbstractFactoryCore(**FACTORY_PARAMETERS)
    sz_config = sz_factory.create_config()
    sz_configmgr = sz_factory.create_configmanager()
    sz_diagnostic = sz_factory.create_diagnostic()
    sz_engine = sz_factory.create_engine()
    sz_product = sz_factory.create_product()
    # Do work...
except SzError as err:
    print(f"\n{err.__class__.__name__} - {err}")
# Python Snippets
#! /usr/bin/env python3

import json
import os
import sys
from pathlib import Path

from senzing import SzEngineFlags, SzError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
PURGE_MSG = """
**************************************** WARNING ****************************************

This example will purge all currently loaded data from the Senzing datastore!
Before proceeding, all instances of Senzing (custom code, tools, etc.) must be shut down.

*****************************************************************************************

Are you sure you want to continue and purge the Senzing datastore? Type YESPURGESENZING to purge: """
RECORDS = [
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "4",
        "PRIMARY_NAME_FULL": "Elizabeth Jonas",
        "ADDR_FULL": "202 Rotary Dr, Rotorville, RI, 78720",
        "SSN_NUMBER": "767-87-7678",
        "DATE_OF_BIRTH": "1/12/1990",
    },
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "5",
        "PRIMARY_NAME_FULL": "Beth Jones",
        "ADDR_FULL": "202 Rotary Dr, Rotorville, RI, 78720",
        "SSN_NUMBER": "767-87-7678",
        "DATE_OF_BIRTH": "1/12/1990",
    },
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "6",
        "PRIMARY_NAME_FULL": "Betsey Jones",
        "ADDR_FULL": "202 Rotary Dr, Rotorville, RI, 78720",
        "PHONE_NUMBER": "202-787-7678",
    },
]
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")

if input(PURGE_MSG) != "YESPURGESENZING":
    sys.exit()

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_diagnostic = sz_factory.create_diagnostic()
    sz_engine = sz_factory.create_engine()
    sz_diagnostic.purge_repository()

    print()
    for record in RECORDS:
        data_source = record["DATA_SOURCE"]
        record_id = record["RECORD_ID"]
        sz_engine.add_record(data_source, record_id, json.dumps(record))
        print(f"Record {record_id} added")

    print()
    for record_id in ("4", "5", "6"):
        response1 = sz_engine.get_entity_by_record_id(
            "TEST",
            record_id,
            SzEngineFlags.SZ_ENTITY_BRIEF_DEFAULT_FLAGS,
        )
        get_json = json.loads(response1)
        print(f"Record {record_id} currently resolves to entity" f" {get_json['RESOLVED_ENTITY']['ENTITY_ID']}")

    print("\nUpdating records with TRUSTED_ID to force unresolve...\n")
    record1 = sz_engine.get_record("TEST", "4")
    record2 = sz_engine.get_record("TEST", "6")
    get1_json = json.loads(record1)
    get2_json = json.loads(record2)
    get1_json["JSON_DATA"].update({"TRUSTED_ID_NUMBER": "TEST_R4-TEST_R6", "TRUSTED_ID_TYPE": "FORCE_UNRESOLVE"})
    get2_json["JSON_DATA"].update({"TRUSTED_ID_NUMBER": "TEST_R6-TEST_R4", "TRUSTED_ID_TYPE": "FORCE_UNRESOLVE"})
    sz_engine.add_record("TEST", "4", json.dumps(get1_json["JSON_DATA"]))
    sz_engine.add_record("TEST", "6", json.dumps(get2_json["JSON_DATA"]))

    for record_id in ("4", "5", "6"):
        response2 = sz_engine.get_entity_by_record_id(
            "TEST",
            record_id,
            SzEngineFlags.SZ_ENTITY_BRIEF_DEFAULT_FLAGS,
        )
        get_json = json.loads(response2)
        print(f"Record {record_id} now resolves to entity" f" {get_json['RESOLVED_ENTITY']['ENTITY_ID']}")
except SzError as err:
    print(f"{err.__class__.__name__} - {err}", file=sys.stderr)
# Stewardship

The stewardship snippets outline forced resolution and un-resolution of records from entities. Stewardship provides the ability to force records to resolve or un-resolve when, for example, Senzing doesn't have enough information at a point in time, but you may have knowledge outside of Senzing to override a decision Senzing has made. Basic stewardship utilizes the `TRUSTED_ID` feature to influence entity resolution. See the [Entity Specification](https://senzing.zendesk.com/hc/en-us/articles/231925448-Generic-Entity-Specification-JSON-CSV-Mapping) for additional details.

In these examples, the current JSON data for a record is first retrieved and additional `TRUSTED_ID` attributes are appended before replacing the records and completing entity resolution, now taking into account the influence of the `TRUSTED_ID` attributes:

- TRUSTED_ID_NUMBER - when the values across records is the same the records resolve to the same entity. If the values used across records differ, the records will not resolve to the same entity.
- TRUSTED_ID_TYPE - an arbitrary value to indicate the use of the TRUSTED_ID_NUMBER.

## Snippets

- **force_resolve.py**
  - Force resolve records together to a single entity
- **force_unresolve.py**
  - Force un-resolve a record from an entity into a new entity

## Example Usage

### Force Resolve

Force resolve first adds 3 records and details which entity they each belong to.

With additional knowledge not represented in Senzing you know record 3 "Pat Smith" represents the same person as record 1 "Patrick Smith". To force resolve these 2 records to the same entity, first fetch the current representation of each record with `get_record()`. Next add `TRUSTED_ID_NUMBER` and `TRUSTED_ID_TYPE` attributes to each of the retrieved records. `TRUSTED_ID_NUMBER` uses the same value to indicate these records should always be considered the same entity and resolve together. In this example the data source of the records and their record IDs are used to create `TRUSTED_ID_NUMBER`. `TRUSTED_ID_TYPE` is set as FORCE_RESOLVE as an indicator they were forced together.

### Force UnResolve

Force UnResolve first adds 3 records and details all records resolved to the same entity.

With additional knowledge not represented in Senzing you know record 6 "Betsey Jones" is not the same as records 4 and 5; Betsey is a twin to "Elizabeth Jones". To force unresolve "Betsey" from the "Elizabeth" entity, first fetch the current representation of each record with `get_record()`. Next add `TRUSTED_ID_NUMBER` and `TRUSTED_ID_TYPE` attributes to each of the retrieved records. `TRUSTED_ID_NUMBER` uses a different value to indicate these records should always be considered different entities and not resolve together. In this example the data source of the records and their record IDs are used to create `TRUSTED_ID_NUMBER`. `TRUSTED_ID_TYPE` is set as FORCE_UNRESOLVE as an indicator they were forced apart.
#! /usr/bin/env python3

import json
import os
import sys
from pathlib import Path

from senzing import SzEngineFlags, SzError
from senzing_core import SzAbstractFactoryCore

INSTANCE_NAME = Path(__file__).stem
PURGE_MSG = """
**************************************** WARNING ****************************************

This example will purge all currently loaded data from the Senzing datastore!
Before proceeding, all instances of Senzing (custom code, tools, etc.) must be shut down.

*****************************************************************************************

Are you sure you want to continue and purge the Senzing datastore? Type YESPURGESENZING to purge: """
RECORDS = [
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "1",
        "PRIMARY_NAME_FULL": "Patrick Smith",
        "AKA_NAME_FULL": "Paddy Smith",
        "ADDR_FULL": "787 Rotary Dr, Rotorville, RI, 78720",
        "PHONE_NUMBER": "787-767-2688",
        "DATE_OF_BIRTH": "1/12/1990",
    },
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "2",
        "PRIMARY_NAME_FULL": "Patricia Smith",
        "ADDR_FULL": "787 Rotary Dr, Rotorville, RI, 78720",
        "PHONE_NUMBER": "787-767-2688",
        "DATE_OF_BIRTH": "5/4/1994",
    },
    {
        "DATA_SOURCE": "TEST",
        "RECORD_ID": "3",
        "PRIMARY_NAME_FULL": "Pat Smith",
        "ADDR_FULL": "787 Rotary Dr, Rotorville, RI, 78720",
        "PHONE_NUMBER": "787-767-2688",
    },
]
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


if input(PURGE_MSG) != "YESPURGESENZING":
    sys.exit()

try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_diagnostic = sz_factory.create_diagnostic()
    sz_engine = sz_factory.create_engine()
    sz_diagnostic.purge_repository()

    print()
    for record in RECORDS:
        data_source = record["DATA_SOURCE"]
        record_id = record["RECORD_ID"]
        sz_engine.add_record(data_source, record_id, json.dumps(record))
        print(f"Record {record_id} added")

    print()
    for record_id in ("1", "2", "3"):
        response1 = sz_engine.get_entity_by_record_id(
            "TEST",
            record_id,
            SzEngineFlags.SZ_ENTITY_BRIEF_DEFAULT_FLAGS,
        )
        get_json = json.loads(response1)
        print(f"Record {record_id} currently resolves to entity" f" {get_json['RESOLVED_ENTITY']['ENTITY_ID']}")

    print("\nUpdating records with TRUSTED_ID to force resolve...\n")
    record1 = sz_engine.get_record("TEST", "1")
    record2 = sz_engine.get_record("TEST", "3")
    get1_json = json.loads(record1)
    get2_json = json.loads(record2)
    get1_json["JSON_DATA"].update({"TRUSTED_ID_NUMBER": "TEST_R1-TEST_R3", "TRUSTED_ID_TYPE": "FORCE_RESOLVE"})
    get2_json["JSON_DATA"].update({"TRUSTED_ID_NUMBER": "TEST_R1-TEST_R3", "TRUSTED_ID_TYPE": "FORCE_RESOLVE"})
    sz_engine.add_record("TEST", "1", json.dumps(get1_json["JSON_DATA"]))
    sz_engine.add_record("TEST", "3", json.dumps(get2_json["JSON_DATA"]))

    for record_id in ("1", "2", "3"):
        response2 = sz_engine.get_entity_by_record_id(
            "TEST",
            record_id,
            SzEngineFlags.SZ_ENTITY_BRIEF_DEFAULT_FLAGS,
        )
        get_json = json.loads(response2)
        print(f"Record {record_id} now resolves to entity" f" {get_json['RESOLVED_ENTITY']['ENTITY_ID']}")
except SzError as err:
    print(f"{err.__class__.__name__} - {err}", file=sys.stderr)
# Replacing Data

Adding a source record with the same data source code and record ID as an existing record will replace it. See the snippets in the loading path for examples on how to add records.
#! /usr/bin/env python3

import concurrent.futures
import itertools
import json
import os
import sys
from pathlib import Path

from senzing import (
    SzBadInputError,
    SzEngineFlags,
    SzError,
    SzRetryableError,
    SzUnrecoverableError,
)
from senzing_core import SzAbstractFactoryCore

INPUT_FILE = Path("../../resources/data/del-500.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem
OUTPUT_FILE = Path("../../resources/output/delete_file_with_info.jsonl").resolve()
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def delete_record(engine, record_to_delete):
    record_dict = json.loads(record_to_delete)
    data_source = record_dict.get("DATA_SOURCE", "")
    record_id = record_dict.get("RECORD_ID", "")
    return engine.delete_record(data_source, record_id, flags=SzEngineFlags.SZ_WITH_INFO)


def futures_del(engine, input_file, output_file):
    success_recs = 0
    error_recs = 0

    with open(output_file, "w", encoding="utf-8") as out_file:
        with open(input_file, "r", encoding="utf-8") as in_file:
            with concurrent.futures.ThreadPoolExecutor() as executor:
                futures = {
                    executor.submit(delete_record, engine, record): record
                    for record in itertools.islice(in_file, executor._max_workers)
                }

                while futures:
                    done, _ = concurrent.futures.wait(futures, return_when=concurrent.futures.FIRST_COMPLETED)
                    for f in done:
                        try:
                            result = f.result()
                        except (SzBadInputError, json.JSONDecodeError) as err:
                            mock_logger("ERROR", err, futures[f])
                            error_recs += 1
                        except SzRetryableError as err:
                            mock_logger("WARN", err, futures[f])
                            error_recs += 1
                        except (SzUnrecoverableError, SzError) as err:
                            mock_logger("CRITICAL", err, futures[f])
                            raise err
                        else:
                            record = in_file.readline()
                            if record:
                                futures[executor.submit(delete_record, engine, record)] = record

                            out_file.write(f"{result}\n")

                            success_recs += 1
                            if success_recs % 100 == 0:
                                print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)
                        finally:
                            del futures[f]

                print(f"\nSuccessfully deleted {success_recs:,} records, with" f" {error_recs:,} errors")
                print(f"\nWith info responses written to {output_file}")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    futures_del(sz_engine, INPUT_FILE, OUTPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INPUT_FILE = Path("../../resources/data/del-500.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def del_records_from_file(engine, input_file):
    success_recs = error_recs = 0

    with open(input_file, "r", encoding="utf-8") as file:

        for record_to_delete in file:
            try:
                record_dict = json.loads(record_to_delete)
                data_source = record_dict.get("DATA_SOURCE", "")
                record_id = record_dict.get("RECORD_ID", "")
                engine.delete_record(data_source, record_id)
            except (SzBadInputError, json.JSONDecodeError) as err:
                mock_logger("ERROR", err, record_to_delete)
                error_recs += 1
            except SzRetryableError as err:
                mock_logger("WARN", err, record_to_delete)
                error_recs += 1
            except (SzUnrecoverableError, SzError) as err:
                mock_logger("CRITICAL", err, record_to_delete)
                raise err
            else:
                success_recs += 1

            if success_recs % 100 == 0:
                print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)

    print(f"\nSuccessfully deleted {success_recs:,} records, with {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    del_records_from_file(sz_engine, INPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
#! /usr/bin/env python3

import concurrent.futures
import itertools
import json
import os
import sys
from pathlib import Path

from senzing import SzBadInputError, SzError, SzRetryableError, SzUnrecoverableError
from senzing_core import SzAbstractFactoryCore

INPUT_FILE = Path("../../resources/data/del-500.jsonl").resolve()
INSTANCE_NAME = Path(__file__).stem
SETTINGS = os.getenv("SENZING_ENGINE_CONFIGURATION_JSON", "{}")


def mock_logger(level, error, error_record=None):
    print(f"\n{level}: {error.__class__.__name__} - {error}", file=sys.stderr)
    if error_record:
        print(f"{error_record}", file=sys.stderr)


def delete_record(engine, record_to_delete):
    record_dict = json.loads(record_to_delete)
    data_source = record_dict.get("DATA_SOURCE", "")
    record_id = record_dict.get("RECORD_ID", "")
    engine.delete_record(data_source, record_id)


def futures_del(engine, input_file):
    success_recs = 0
    error_recs = 0

    with open(input_file, "r", encoding="utf-8") as in_file:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = {
                executor.submit(delete_record, engine, record): record
                for record in itertools.islice(in_file, executor._max_workers)
            }

            while futures:
                done, _ = concurrent.futures.wait(futures, return_when=concurrent.futures.FIRST_COMPLETED)
                for f in done:
                    try:
                        f.result()
                    except (SzBadInputError, json.JSONDecodeError) as err:
                        mock_logger("ERROR", err, futures[f])
                        error_recs += 1
                    except SzRetryableError as err:
                        mock_logger("WARN", err, futures[f])
                        error_recs += 1
                    except (SzUnrecoverableError, SzError) as err:
                        mock_logger("CRITICAL", err, futures[f])
                        raise err
                    else:
                        record = in_file.readline()
                        if record:
                            futures[executor.submit(delete_record, engine, record)] = record

                        success_recs += 1
                        if success_recs % 100 == 0:
                            print(f"Processed {success_recs:,} adds, with {error_recs:,} errors", flush=True)
                    finally:
                        del futures[f]

            print(f"\nSuccessfully deleted {success_recs:,} records, with" f" {error_recs:,} errors")


try:
    sz_factory = SzAbstractFactoryCore(INSTANCE_NAME, SETTINGS, verbose_logging=False)
    sz_engine = sz_factory.create_engine()
    futures_del(sz_engine, INPUT_FILE)
except SzError as err:
    mock_logger("CRITICAL", err)
# Deleting Data

The deletion snippets outline deleting previously added source records. Deleting source records removes the previously added source record from the system, completes the entity resolution process and persists outcomes in the Senzing repository.

Deleting a record only requires the data source code and record ID for the record to be deleted.

## Snippets

- **delete_futures.py**
  - Read and delete source records from a file using multiple threads
- **delete_loop.py**
  - Basic read and delete source records from a file
- **delete_with_info_futures.py**
  - Read and delete source records from a file using multiple threads
  - Collect the response using the [SZ_WITH_INFO flag](../../README.md#with-info) on the `delete_record()` method and write it to a file
